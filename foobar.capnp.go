// Code generated by capnpc-go. DO NOT EDIT.

package foobar

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type RaftTransport capnp.Client

// RaftTransport_TypeID is the unique identifier for the type RaftTransport.
const RaftTransport_TypeID = 0xb3384108b060ed0c

func (c RaftTransport) AppendStream(ctx context.Context, params func(RaftTransport_appendStream_Params) error) (RaftTransport_appendStream_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      0,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "appendStream",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RaftTransport_appendStream_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RaftTransport_appendStream_Results_Future{Future: ans.Future()}, release

}

func (c RaftTransport) AppendEntries(ctx context.Context, params func(RaftTransport_appendEntries_Params) error) (RaftTransport_appendEntries_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      1,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "appendEntries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 24, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RaftTransport_appendEntries_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RaftTransport_appendEntries_Results_Future{Future: ans.Future()}, release

}

func (c RaftTransport) RequestVote(ctx context.Context, params func(RaftTransport_requestVote_Params) error) (RaftTransport_requestVote_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      2,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "requestVote",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 32, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RaftTransport_requestVote_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RaftTransport_requestVote_Results_Future{Future: ans.Future()}, release

}

func (c RaftTransport) TimeoutNow(ctx context.Context, params func(RaftTransport_timeoutNow_Params) error) (RaftTransport_timeoutNow_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      3,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "timeoutNow",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RaftTransport_timeoutNow_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RaftTransport_timeoutNow_Results_Future{Future: ans.Future()}, release

}

func (c RaftTransport) InstallSnapshot(ctx context.Context, params func(RaftTransport_installSnapshot_Params) error) (RaftTransport_installSnapshot_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      4,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "installSnapshot",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 48, PointerCount: 5}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RaftTransport_installSnapshot_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RaftTransport_installSnapshot_Results_Future{Future: ans.Future()}, release

}

func (c RaftTransport) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c RaftTransport) String() string {
	return "RaftTransport(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c RaftTransport) AddRef() RaftTransport {
	return RaftTransport(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c RaftTransport) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c RaftTransport) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c RaftTransport) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (RaftTransport) DecodeFromPtr(p capnp.Ptr) RaftTransport {
	return RaftTransport(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c RaftTransport) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c RaftTransport) IsSame(other RaftTransport) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c RaftTransport) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c RaftTransport) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A RaftTransport_Server is a RaftTransport with a local implementation.
type RaftTransport_Server interface {
	AppendStream(context.Context, RaftTransport_appendStream) error

	AppendEntries(context.Context, RaftTransport_appendEntries) error

	RequestVote(context.Context, RaftTransport_requestVote) error

	TimeoutNow(context.Context, RaftTransport_timeoutNow) error

	InstallSnapshot(context.Context, RaftTransport_installSnapshot) error
}

// RaftTransport_NewServer creates a new Server from an implementation of RaftTransport_Server.
func RaftTransport_NewServer(s RaftTransport_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RaftTransport_Methods(nil, s), s, c)
}

// RaftTransport_ServerToClient creates a new Client from an implementation of RaftTransport_Server.
// The caller is responsible for calling Release on the returned Client.
func RaftTransport_ServerToClient(s RaftTransport_Server) RaftTransport {
	return RaftTransport(capnp.NewClient(RaftTransport_NewServer(s)))
}

// RaftTransport_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RaftTransport_Methods(methods []server.Method, s RaftTransport_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      0,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "appendStream",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AppendStream(ctx, RaftTransport_appendStream{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      1,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "appendEntries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AppendEntries(ctx, RaftTransport_appendEntries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      2,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "requestVote",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RequestVote(ctx, RaftTransport_requestVote{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      3,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "timeoutNow",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TimeoutNow(ctx, RaftTransport_timeoutNow{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      4,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "installSnapshot",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.InstallSnapshot(ctx, RaftTransport_installSnapshot{call})
		},
	})

	return methods
}

// RaftTransport_appendStream holds the state for a server call to RaftTransport.appendStream.
// See server.Call for documentation.
type RaftTransport_appendStream struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RaftTransport_appendStream) Args() RaftTransport_appendStream_Params {
	return RaftTransport_appendStream_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RaftTransport_appendStream) AllocResults() (RaftTransport_appendStream_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RaftTransport_appendStream_Results(r), err
}

// RaftTransport_appendEntries holds the state for a server call to RaftTransport.appendEntries.
// See server.Call for documentation.
type RaftTransport_appendEntries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RaftTransport_appendEntries) Args() RaftTransport_appendEntries_Params {
	return RaftTransport_appendEntries_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RaftTransport_appendEntries) AllocResults() (RaftTransport_appendEntries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RaftTransport_appendEntries_Results(r), err
}

// RaftTransport_requestVote holds the state for a server call to RaftTransport.requestVote.
// See server.Call for documentation.
type RaftTransport_requestVote struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RaftTransport_requestVote) Args() RaftTransport_requestVote_Params {
	return RaftTransport_requestVote_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RaftTransport_requestVote) AllocResults() (RaftTransport_requestVote_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return RaftTransport_requestVote_Results(r), err
}

// RaftTransport_timeoutNow holds the state for a server call to RaftTransport.timeoutNow.
// See server.Call for documentation.
type RaftTransport_timeoutNow struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RaftTransport_timeoutNow) Args() RaftTransport_timeoutNow_Params {
	return RaftTransport_timeoutNow_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RaftTransport_timeoutNow) AllocResults() (RaftTransport_timeoutNow_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RaftTransport_timeoutNow_Results(r), err
}

// RaftTransport_installSnapshot holds the state for a server call to RaftTransport.installSnapshot.
// See server.Call for documentation.
type RaftTransport_installSnapshot struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RaftTransport_installSnapshot) Args() RaftTransport_installSnapshot_Params {
	return RaftTransport_installSnapshot_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RaftTransport_installSnapshot) AllocResults() (RaftTransport_installSnapshot_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RaftTransport_installSnapshot_Results(r), err
}

// RaftTransport_List is a list of RaftTransport.
type RaftTransport_List = capnp.CapList[RaftTransport]

// NewRaftTransport creates a new list of RaftTransport.
func NewRaftTransport_List(s *capnp.Segment, sz int32) (RaftTransport_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[RaftTransport](l), err
}

type RaftTransport_RpcHeader capnp.Struct

// RaftTransport_RpcHeader_TypeID is the unique identifier for the type RaftTransport_RpcHeader.
const RaftTransport_RpcHeader_TypeID = 0x9befdc0c32667b42

func NewRaftTransport_RpcHeader(s *capnp.Segment) (RaftTransport_RpcHeader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaftTransport_RpcHeader(st), err
}

func NewRootRaftTransport_RpcHeader(s *capnp.Segment) (RaftTransport_RpcHeader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaftTransport_RpcHeader(st), err
}

func ReadRootRaftTransport_RpcHeader(msg *capnp.Message) (RaftTransport_RpcHeader, error) {
	root, err := msg.Root()
	return RaftTransport_RpcHeader(root.Struct()), err
}

func (s RaftTransport_RpcHeader) String() string {
	str, _ := text.Marshal(0x9befdc0c32667b42, capnp.Struct(s))
	return str
}

func (s RaftTransport_RpcHeader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_RpcHeader) DecodeFromPtr(p capnp.Ptr) RaftTransport_RpcHeader {
	return RaftTransport_RpcHeader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_RpcHeader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_RpcHeader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_RpcHeader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_RpcHeader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_RpcHeader) Version() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s RaftTransport_RpcHeader) SetVersion(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s RaftTransport_RpcHeader) Id() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s RaftTransport_RpcHeader) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_RpcHeader) SetId(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s RaftTransport_RpcHeader) Addr() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s RaftTransport_RpcHeader) HasAddr() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaftTransport_RpcHeader) SetAddr(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// RaftTransport_RpcHeader_List is a list of RaftTransport_RpcHeader.
type RaftTransport_RpcHeader_List = capnp.StructList[RaftTransport_RpcHeader]

// NewRaftTransport_RpcHeader creates a new list of RaftTransport_RpcHeader.
func NewRaftTransport_RpcHeader_List(s *capnp.Segment, sz int32) (RaftTransport_RpcHeader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[RaftTransport_RpcHeader](l), err
}

// RaftTransport_RpcHeader_Future is a wrapper for a RaftTransport_RpcHeader promised by a client call.
type RaftTransport_RpcHeader_Future struct{ *capnp.Future }

func (f RaftTransport_RpcHeader_Future) Struct() (RaftTransport_RpcHeader, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_RpcHeader(p.Struct()), err
}

type RaftTransport_LogType uint16

// RaftTransport_LogType_TypeID is the unique identifier for the type RaftTransport_LogType.
const RaftTransport_LogType_TypeID = 0x8c3e88f463832eea

// Values of RaftTransport_LogType.
const (
	RaftTransport_LogType_command              RaftTransport_LogType = 0
	RaftTransport_LogType_noop                 RaftTransport_LogType = 1
	RaftTransport_LogType_addPeerDeprecated    RaftTransport_LogType = 2
	RaftTransport_LogType_removePeerDeprecated RaftTransport_LogType = 3
	RaftTransport_LogType_barrier              RaftTransport_LogType = 4
	RaftTransport_LogType_configuration        RaftTransport_LogType = 5
)

// String returns the enum's constant name.
func (c RaftTransport_LogType) String() string {
	switch c {
	case RaftTransport_LogType_command:
		return "command"
	case RaftTransport_LogType_noop:
		return "noop"
	case RaftTransport_LogType_addPeerDeprecated:
		return "addPeerDeprecated"
	case RaftTransport_LogType_removePeerDeprecated:
		return "removePeerDeprecated"
	case RaftTransport_LogType_barrier:
		return "barrier"
	case RaftTransport_LogType_configuration:
		return "configuration"

	default:
		return ""
	}
}

// RaftTransport_LogTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func RaftTransport_LogTypeFromString(c string) RaftTransport_LogType {
	switch c {
	case "command":
		return RaftTransport_LogType_command
	case "noop":
		return RaftTransport_LogType_noop
	case "addPeerDeprecated":
		return RaftTransport_LogType_addPeerDeprecated
	case "removePeerDeprecated":
		return RaftTransport_LogType_removePeerDeprecated
	case "barrier":
		return RaftTransport_LogType_barrier
	case "configuration":
		return RaftTransport_LogType_configuration

	default:
		return 0
	}
}

type RaftTransport_LogType_List = capnp.EnumList[RaftTransport_LogType]

func NewRaftTransport_LogType_List(s *capnp.Segment, sz int32) (RaftTransport_LogType_List, error) {
	return capnp.NewEnumList[RaftTransport_LogType](s, sz)
}

type RaftTransport_Log capnp.Struct

// RaftTransport_Log_TypeID is the unique identifier for the type RaftTransport_Log.
const RaftTransport_Log_TypeID = 0xc9b7901c714e1cfe

func NewRaftTransport_Log(s *capnp.Segment) (RaftTransport_Log, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return RaftTransport_Log(st), err
}

func NewRootRaftTransport_Log(s *capnp.Segment) (RaftTransport_Log, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return RaftTransport_Log(st), err
}

func ReadRootRaftTransport_Log(msg *capnp.Message) (RaftTransport_Log, error) {
	root, err := msg.Root()
	return RaftTransport_Log(root.Struct()), err
}

func (s RaftTransport_Log) String() string {
	str, _ := text.Marshal(0xc9b7901c714e1cfe, capnp.Struct(s))
	return str
}

func (s RaftTransport_Log) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_Log) DecodeFromPtr(p capnp.Ptr) RaftTransport_Log {
	return RaftTransport_Log(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_Log) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_Log) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_Log) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_Log) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_Log) Index() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RaftTransport_Log) SetIndex(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RaftTransport_Log) Term() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RaftTransport_Log) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s RaftTransport_Log) Type() RaftTransport_LogType {
	return RaftTransport_LogType(capnp.Struct(s).Uint16(16))
}

func (s RaftTransport_Log) SetType(v RaftTransport_LogType) {
	capnp.Struct(s).SetUint16(16, uint16(v))
}

func (s RaftTransport_Log) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s RaftTransport_Log) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_Log) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s RaftTransport_Log) Extensions() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s RaftTransport_Log) HasExtensions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaftTransport_Log) SetExtensions(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s RaftTransport_Log) AppendedAt() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s RaftTransport_Log) SetAppendedAt(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

// RaftTransport_Log_List is a list of RaftTransport_Log.
type RaftTransport_Log_List = capnp.StructList[RaftTransport_Log]

// NewRaftTransport_Log creates a new list of RaftTransport_Log.
func NewRaftTransport_Log_List(s *capnp.Segment, sz int32) (RaftTransport_Log_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[RaftTransport_Log](l), err
}

// RaftTransport_Log_Future is a wrapper for a RaftTransport_Log promised by a client call.
type RaftTransport_Log_Future struct{ *capnp.Future }

func (f RaftTransport_Log_Future) Struct() (RaftTransport_Log, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_Log(p.Struct()), err
}

type RaftTransport_appendStream_Params capnp.Struct

// RaftTransport_appendStream_Params_TypeID is the unique identifier for the type RaftTransport_appendStream_Params.
const RaftTransport_appendStream_Params_TypeID = 0xcf275fa14d609124

func NewRaftTransport_appendStream_Params(s *capnp.Segment) (RaftTransport_appendStream_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RaftTransport_appendStream_Params(st), err
}

func NewRootRaftTransport_appendStream_Params(s *capnp.Segment) (RaftTransport_appendStream_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RaftTransport_appendStream_Params(st), err
}

func ReadRootRaftTransport_appendStream_Params(msg *capnp.Message) (RaftTransport_appendStream_Params, error) {
	root, err := msg.Root()
	return RaftTransport_appendStream_Params(root.Struct()), err
}

func (s RaftTransport_appendStream_Params) String() string {
	str, _ := text.Marshal(0xcf275fa14d609124, capnp.Struct(s))
	return str
}

func (s RaftTransport_appendStream_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_appendStream_Params) DecodeFromPtr(p capnp.Ptr) RaftTransport_appendStream_Params {
	return RaftTransport_appendStream_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_appendStream_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_appendStream_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_appendStream_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_appendStream_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// RaftTransport_appendStream_Params_List is a list of RaftTransport_appendStream_Params.
type RaftTransport_appendStream_Params_List = capnp.StructList[RaftTransport_appendStream_Params]

// NewRaftTransport_appendStream_Params creates a new list of RaftTransport_appendStream_Params.
func NewRaftTransport_appendStream_Params_List(s *capnp.Segment, sz int32) (RaftTransport_appendStream_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RaftTransport_appendStream_Params](l), err
}

// RaftTransport_appendStream_Params_Future is a wrapper for a RaftTransport_appendStream_Params promised by a client call.
type RaftTransport_appendStream_Params_Future struct{ *capnp.Future }

func (f RaftTransport_appendStream_Params_Future) Struct() (RaftTransport_appendStream_Params, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_appendStream_Params(p.Struct()), err
}

type RaftTransport_appendStream_Results capnp.Struct

// RaftTransport_appendStream_Results_TypeID is the unique identifier for the type RaftTransport_appendStream_Results.
const RaftTransport_appendStream_Results_TypeID = 0xbfd6618757a5d3ba

func NewRaftTransport_appendStream_Results(s *capnp.Segment) (RaftTransport_appendStream_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RaftTransport_appendStream_Results(st), err
}

func NewRootRaftTransport_appendStream_Results(s *capnp.Segment) (RaftTransport_appendStream_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RaftTransport_appendStream_Results(st), err
}

func ReadRootRaftTransport_appendStream_Results(msg *capnp.Message) (RaftTransport_appendStream_Results, error) {
	root, err := msg.Root()
	return RaftTransport_appendStream_Results(root.Struct()), err
}

func (s RaftTransport_appendStream_Results) String() string {
	str, _ := text.Marshal(0xbfd6618757a5d3ba, capnp.Struct(s))
	return str
}

func (s RaftTransport_appendStream_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_appendStream_Results) DecodeFromPtr(p capnp.Ptr) RaftTransport_appendStream_Results {
	return RaftTransport_appendStream_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_appendStream_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_appendStream_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_appendStream_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_appendStream_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// RaftTransport_appendStream_Results_List is a list of RaftTransport_appendStream_Results.
type RaftTransport_appendStream_Results_List = capnp.StructList[RaftTransport_appendStream_Results]

// NewRaftTransport_appendStream_Results creates a new list of RaftTransport_appendStream_Results.
func NewRaftTransport_appendStream_Results_List(s *capnp.Segment, sz int32) (RaftTransport_appendStream_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RaftTransport_appendStream_Results](l), err
}

// RaftTransport_appendStream_Results_Future is a wrapper for a RaftTransport_appendStream_Results promised by a client call.
type RaftTransport_appendStream_Results_Future struct{ *capnp.Future }

func (f RaftTransport_appendStream_Results_Future) Struct() (RaftTransport_appendStream_Results, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_appendStream_Results(p.Struct()), err
}

type RaftTransport_appendEntries_Params capnp.Struct

// RaftTransport_appendEntries_Params_TypeID is the unique identifier for the type RaftTransport_appendEntries_Params.
const RaftTransport_appendEntries_Params_TypeID = 0xf60d7d7110329c91

func NewRaftTransport_appendEntries_Params(s *capnp.Segment) (RaftTransport_appendEntries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return RaftTransport_appendEntries_Params(st), err
}

func NewRootRaftTransport_appendEntries_Params(s *capnp.Segment) (RaftTransport_appendEntries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return RaftTransport_appendEntries_Params(st), err
}

func ReadRootRaftTransport_appendEntries_Params(msg *capnp.Message) (RaftTransport_appendEntries_Params, error) {
	root, err := msg.Root()
	return RaftTransport_appendEntries_Params(root.Struct()), err
}

func (s RaftTransport_appendEntries_Params) String() string {
	str, _ := text.Marshal(0xf60d7d7110329c91, capnp.Struct(s))
	return str
}

func (s RaftTransport_appendEntries_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_appendEntries_Params) DecodeFromPtr(p capnp.Ptr) RaftTransport_appendEntries_Params {
	return RaftTransport_appendEntries_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_appendEntries_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_appendEntries_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_appendEntries_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_appendEntries_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_appendEntries_Params) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_appendEntries_Params) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_appendEntries_Params) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_appendEntries_Params) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaftTransport_appendEntries_Params) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RaftTransport_appendEntries_Params) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RaftTransport_appendEntries_Params) Leader() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s RaftTransport_appendEntries_Params) HasLeader() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaftTransport_appendEntries_Params) SetLeader(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s RaftTransport_appendEntries_Params) PrevLogEntry() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RaftTransport_appendEntries_Params) SetPrevLogEntry(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s RaftTransport_appendEntries_Params) PrevLogTerm() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s RaftTransport_appendEntries_Params) SetPrevLogTerm(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s RaftTransport_appendEntries_Params) Entries() (RaftTransport_Log_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return RaftTransport_Log_List(p.List()), err
}

func (s RaftTransport_appendEntries_Params) HasEntries() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RaftTransport_appendEntries_Params) SetEntries(v RaftTransport_Log_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated RaftTransport_Log_List, preferring placement in s's segment.
func (s RaftTransport_appendEntries_Params) NewEntries(n int32) (RaftTransport_Log_List, error) {
	l, err := NewRaftTransport_Log_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return RaftTransport_Log_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// RaftTransport_appendEntries_Params_List is a list of RaftTransport_appendEntries_Params.
type RaftTransport_appendEntries_Params_List = capnp.StructList[RaftTransport_appendEntries_Params]

// NewRaftTransport_appendEntries_Params creates a new list of RaftTransport_appendEntries_Params.
func NewRaftTransport_appendEntries_Params_List(s *capnp.Segment, sz int32) (RaftTransport_appendEntries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return capnp.StructList[RaftTransport_appendEntries_Params](l), err
}

// RaftTransport_appendEntries_Params_Future is a wrapper for a RaftTransport_appendEntries_Params promised by a client call.
type RaftTransport_appendEntries_Params_Future struct{ *capnp.Future }

func (f RaftTransport_appendEntries_Params_Future) Struct() (RaftTransport_appendEntries_Params, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_appendEntries_Params(p.Struct()), err
}
func (p RaftTransport_appendEntries_Params_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

type RaftTransport_appendEntries_Results capnp.Struct

// RaftTransport_appendEntries_Results_TypeID is the unique identifier for the type RaftTransport_appendEntries_Results.
const RaftTransport_appendEntries_Results_TypeID = 0xd1e595a84b2056db

func NewRaftTransport_appendEntries_Results(s *capnp.Segment) (RaftTransport_appendEntries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RaftTransport_appendEntries_Results(st), err
}

func NewRootRaftTransport_appendEntries_Results(s *capnp.Segment) (RaftTransport_appendEntries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RaftTransport_appendEntries_Results(st), err
}

func ReadRootRaftTransport_appendEntries_Results(msg *capnp.Message) (RaftTransport_appendEntries_Results, error) {
	root, err := msg.Root()
	return RaftTransport_appendEntries_Results(root.Struct()), err
}

func (s RaftTransport_appendEntries_Results) String() string {
	str, _ := text.Marshal(0xd1e595a84b2056db, capnp.Struct(s))
	return str
}

func (s RaftTransport_appendEntries_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_appendEntries_Results) DecodeFromPtr(p capnp.Ptr) RaftTransport_appendEntries_Results {
	return RaftTransport_appendEntries_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_appendEntries_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_appendEntries_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_appendEntries_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_appendEntries_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_appendEntries_Results) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_appendEntries_Results) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_appendEntries_Results) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_appendEntries_Results) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaftTransport_appendEntries_Results) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RaftTransport_appendEntries_Results) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RaftTransport_appendEntries_Results) LastLog() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RaftTransport_appendEntries_Results) SetLastLog(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s RaftTransport_appendEntries_Results) Success() bool {
	return capnp.Struct(s).Bit(128)
}

func (s RaftTransport_appendEntries_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(128, v)
}

func (s RaftTransport_appendEntries_Results) NoRetryBackoff() bool {
	return capnp.Struct(s).Bit(129)
}

func (s RaftTransport_appendEntries_Results) SetNoRetryBackoff(v bool) {
	capnp.Struct(s).SetBit(129, v)
}

// RaftTransport_appendEntries_Results_List is a list of RaftTransport_appendEntries_Results.
type RaftTransport_appendEntries_Results_List = capnp.StructList[RaftTransport_appendEntries_Results]

// NewRaftTransport_appendEntries_Results creates a new list of RaftTransport_appendEntries_Results.
func NewRaftTransport_appendEntries_Results_List(s *capnp.Segment, sz int32) (RaftTransport_appendEntries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[RaftTransport_appendEntries_Results](l), err
}

// RaftTransport_appendEntries_Results_Future is a wrapper for a RaftTransport_appendEntries_Results promised by a client call.
type RaftTransport_appendEntries_Results_Future struct{ *capnp.Future }

func (f RaftTransport_appendEntries_Results_Future) Struct() (RaftTransport_appendEntries_Results, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_appendEntries_Results(p.Struct()), err
}
func (p RaftTransport_appendEntries_Results_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

type RaftTransport_requestVote_Params capnp.Struct

// RaftTransport_requestVote_Params_TypeID is the unique identifier for the type RaftTransport_requestVote_Params.
const RaftTransport_requestVote_Params_TypeID = 0xe9f51c7251030d94

func NewRaftTransport_requestVote_Params(s *capnp.Segment) (RaftTransport_requestVote_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return RaftTransport_requestVote_Params(st), err
}

func NewRootRaftTransport_requestVote_Params(s *capnp.Segment) (RaftTransport_requestVote_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return RaftTransport_requestVote_Params(st), err
}

func ReadRootRaftTransport_requestVote_Params(msg *capnp.Message) (RaftTransport_requestVote_Params, error) {
	root, err := msg.Root()
	return RaftTransport_requestVote_Params(root.Struct()), err
}

func (s RaftTransport_requestVote_Params) String() string {
	str, _ := text.Marshal(0xe9f51c7251030d94, capnp.Struct(s))
	return str
}

func (s RaftTransport_requestVote_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_requestVote_Params) DecodeFromPtr(p capnp.Ptr) RaftTransport_requestVote_Params {
	return RaftTransport_requestVote_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_requestVote_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_requestVote_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_requestVote_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_requestVote_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_requestVote_Params) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_requestVote_Params) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_requestVote_Params) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_requestVote_Params) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaftTransport_requestVote_Params) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RaftTransport_requestVote_Params) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RaftTransport_requestVote_Params) Candidate() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s RaftTransport_requestVote_Params) HasCandidate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaftTransport_requestVote_Params) SetCandidate(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s RaftTransport_requestVote_Params) LastLogIndex() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RaftTransport_requestVote_Params) SetLastLogIndex(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s RaftTransport_requestVote_Params) LastLogTerm() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s RaftTransport_requestVote_Params) SetLastLogTerm(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s RaftTransport_requestVote_Params) LeadershipTransfer() bool {
	return capnp.Struct(s).Bit(192)
}

func (s RaftTransport_requestVote_Params) SetLeadershipTransfer(v bool) {
	capnp.Struct(s).SetBit(192, v)
}

// RaftTransport_requestVote_Params_List is a list of RaftTransport_requestVote_Params.
type RaftTransport_requestVote_Params_List = capnp.StructList[RaftTransport_requestVote_Params]

// NewRaftTransport_requestVote_Params creates a new list of RaftTransport_requestVote_Params.
func NewRaftTransport_requestVote_Params_List(s *capnp.Segment, sz int32) (RaftTransport_requestVote_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[RaftTransport_requestVote_Params](l), err
}

// RaftTransport_requestVote_Params_Future is a wrapper for a RaftTransport_requestVote_Params promised by a client call.
type RaftTransport_requestVote_Params_Future struct{ *capnp.Future }

func (f RaftTransport_requestVote_Params_Future) Struct() (RaftTransport_requestVote_Params, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_requestVote_Params(p.Struct()), err
}
func (p RaftTransport_requestVote_Params_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

type RaftTransport_requestVote_Results capnp.Struct

// RaftTransport_requestVote_Results_TypeID is the unique identifier for the type RaftTransport_requestVote_Results.
const RaftTransport_requestVote_Results_TypeID = 0xd02521e4f2f96083

func NewRaftTransport_requestVote_Results(s *capnp.Segment) (RaftTransport_requestVote_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return RaftTransport_requestVote_Results(st), err
}

func NewRootRaftTransport_requestVote_Results(s *capnp.Segment) (RaftTransport_requestVote_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return RaftTransport_requestVote_Results(st), err
}

func ReadRootRaftTransport_requestVote_Results(msg *capnp.Message) (RaftTransport_requestVote_Results, error) {
	root, err := msg.Root()
	return RaftTransport_requestVote_Results(root.Struct()), err
}

func (s RaftTransport_requestVote_Results) String() string {
	str, _ := text.Marshal(0xd02521e4f2f96083, capnp.Struct(s))
	return str
}

func (s RaftTransport_requestVote_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_requestVote_Results) DecodeFromPtr(p capnp.Ptr) RaftTransport_requestVote_Results {
	return RaftTransport_requestVote_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_requestVote_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_requestVote_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_requestVote_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_requestVote_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_requestVote_Results) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_requestVote_Results) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_requestVote_Results) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_requestVote_Results) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaftTransport_requestVote_Results) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RaftTransport_requestVote_Results) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RaftTransport_requestVote_Results) Peers() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s RaftTransport_requestVote_Results) HasPeers() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaftTransport_requestVote_Results) SetPeers(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s RaftTransport_requestVote_Results) Granted() bool {
	return capnp.Struct(s).Bit(64)
}

func (s RaftTransport_requestVote_Results) SetGranted(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

// RaftTransport_requestVote_Results_List is a list of RaftTransport_requestVote_Results.
type RaftTransport_requestVote_Results_List = capnp.StructList[RaftTransport_requestVote_Results]

// NewRaftTransport_requestVote_Results creates a new list of RaftTransport_requestVote_Results.
func NewRaftTransport_requestVote_Results_List(s *capnp.Segment, sz int32) (RaftTransport_requestVote_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[RaftTransport_requestVote_Results](l), err
}

// RaftTransport_requestVote_Results_Future is a wrapper for a RaftTransport_requestVote_Results promised by a client call.
type RaftTransport_requestVote_Results_Future struct{ *capnp.Future }

func (f RaftTransport_requestVote_Results_Future) Struct() (RaftTransport_requestVote_Results, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_requestVote_Results(p.Struct()), err
}
func (p RaftTransport_requestVote_Results_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

type RaftTransport_timeoutNow_Params capnp.Struct

// RaftTransport_timeoutNow_Params_TypeID is the unique identifier for the type RaftTransport_timeoutNow_Params.
const RaftTransport_timeoutNow_Params_TypeID = 0xc7702dcc74c3ba32

func NewRaftTransport_timeoutNow_Params(s *capnp.Segment) (RaftTransport_timeoutNow_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RaftTransport_timeoutNow_Params(st), err
}

func NewRootRaftTransport_timeoutNow_Params(s *capnp.Segment) (RaftTransport_timeoutNow_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RaftTransport_timeoutNow_Params(st), err
}

func ReadRootRaftTransport_timeoutNow_Params(msg *capnp.Message) (RaftTransport_timeoutNow_Params, error) {
	root, err := msg.Root()
	return RaftTransport_timeoutNow_Params(root.Struct()), err
}

func (s RaftTransport_timeoutNow_Params) String() string {
	str, _ := text.Marshal(0xc7702dcc74c3ba32, capnp.Struct(s))
	return str
}

func (s RaftTransport_timeoutNow_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_timeoutNow_Params) DecodeFromPtr(p capnp.Ptr) RaftTransport_timeoutNow_Params {
	return RaftTransport_timeoutNow_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_timeoutNow_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_timeoutNow_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_timeoutNow_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_timeoutNow_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_timeoutNow_Params) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_timeoutNow_Params) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_timeoutNow_Params) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_timeoutNow_Params) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RaftTransport_timeoutNow_Params_List is a list of RaftTransport_timeoutNow_Params.
type RaftTransport_timeoutNow_Params_List = capnp.StructList[RaftTransport_timeoutNow_Params]

// NewRaftTransport_timeoutNow_Params creates a new list of RaftTransport_timeoutNow_Params.
func NewRaftTransport_timeoutNow_Params_List(s *capnp.Segment, sz int32) (RaftTransport_timeoutNow_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RaftTransport_timeoutNow_Params](l), err
}

// RaftTransport_timeoutNow_Params_Future is a wrapper for a RaftTransport_timeoutNow_Params promised by a client call.
type RaftTransport_timeoutNow_Params_Future struct{ *capnp.Future }

func (f RaftTransport_timeoutNow_Params_Future) Struct() (RaftTransport_timeoutNow_Params, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_timeoutNow_Params(p.Struct()), err
}
func (p RaftTransport_timeoutNow_Params_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

type RaftTransport_timeoutNow_Results capnp.Struct

// RaftTransport_timeoutNow_Results_TypeID is the unique identifier for the type RaftTransport_timeoutNow_Results.
const RaftTransport_timeoutNow_Results_TypeID = 0x93170655133f9d22

func NewRaftTransport_timeoutNow_Results(s *capnp.Segment) (RaftTransport_timeoutNow_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RaftTransport_timeoutNow_Results(st), err
}

func NewRootRaftTransport_timeoutNow_Results(s *capnp.Segment) (RaftTransport_timeoutNow_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RaftTransport_timeoutNow_Results(st), err
}

func ReadRootRaftTransport_timeoutNow_Results(msg *capnp.Message) (RaftTransport_timeoutNow_Results, error) {
	root, err := msg.Root()
	return RaftTransport_timeoutNow_Results(root.Struct()), err
}

func (s RaftTransport_timeoutNow_Results) String() string {
	str, _ := text.Marshal(0x93170655133f9d22, capnp.Struct(s))
	return str
}

func (s RaftTransport_timeoutNow_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_timeoutNow_Results) DecodeFromPtr(p capnp.Ptr) RaftTransport_timeoutNow_Results {
	return RaftTransport_timeoutNow_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_timeoutNow_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_timeoutNow_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_timeoutNow_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_timeoutNow_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_timeoutNow_Results) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_timeoutNow_Results) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_timeoutNow_Results) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_timeoutNow_Results) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RaftTransport_timeoutNow_Results_List is a list of RaftTransport_timeoutNow_Results.
type RaftTransport_timeoutNow_Results_List = capnp.StructList[RaftTransport_timeoutNow_Results]

// NewRaftTransport_timeoutNow_Results creates a new list of RaftTransport_timeoutNow_Results.
func NewRaftTransport_timeoutNow_Results_List(s *capnp.Segment, sz int32) (RaftTransport_timeoutNow_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RaftTransport_timeoutNow_Results](l), err
}

// RaftTransport_timeoutNow_Results_Future is a wrapper for a RaftTransport_timeoutNow_Results promised by a client call.
type RaftTransport_timeoutNow_Results_Future struct{ *capnp.Future }

func (f RaftTransport_timeoutNow_Results_Future) Struct() (RaftTransport_timeoutNow_Results, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_timeoutNow_Results(p.Struct()), err
}
func (p RaftTransport_timeoutNow_Results_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

type RaftTransport_installSnapshot_Params capnp.Struct

// RaftTransport_installSnapshot_Params_TypeID is the unique identifier for the type RaftTransport_installSnapshot_Params.
const RaftTransport_installSnapshot_Params_TypeID = 0xaa7bdb586393ba80

func NewRaftTransport_installSnapshot_Params(s *capnp.Segment) (RaftTransport_installSnapshot_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 5})
	return RaftTransport_installSnapshot_Params(st), err
}

func NewRootRaftTransport_installSnapshot_Params(s *capnp.Segment) (RaftTransport_installSnapshot_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 5})
	return RaftTransport_installSnapshot_Params(st), err
}

func ReadRootRaftTransport_installSnapshot_Params(msg *capnp.Message) (RaftTransport_installSnapshot_Params, error) {
	root, err := msg.Root()
	return RaftTransport_installSnapshot_Params(root.Struct()), err
}

func (s RaftTransport_installSnapshot_Params) String() string {
	str, _ := text.Marshal(0xaa7bdb586393ba80, capnp.Struct(s))
	return str
}

func (s RaftTransport_installSnapshot_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_installSnapshot_Params) DecodeFromPtr(p capnp.Ptr) RaftTransport_installSnapshot_Params {
	return RaftTransport_installSnapshot_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_installSnapshot_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_installSnapshot_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_installSnapshot_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_installSnapshot_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_installSnapshot_Params) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_installSnapshot_Params) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_installSnapshot_Params) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_installSnapshot_Params) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaftTransport_installSnapshot_Params) SnapshotVersion() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s RaftTransport_installSnapshot_Params) SetSnapshotVersion(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s RaftTransport_installSnapshot_Params) Term() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RaftTransport_installSnapshot_Params) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s RaftTransport_installSnapshot_Params) Leader() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s RaftTransport_installSnapshot_Params) HasLeader() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaftTransport_installSnapshot_Params) SetLeader(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s RaftTransport_installSnapshot_Params) LastLogIndex() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s RaftTransport_installSnapshot_Params) SetLastLogIndex(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s RaftTransport_installSnapshot_Params) LastLogTerm() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s RaftTransport_installSnapshot_Params) SetLastLogTerm(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

func (s RaftTransport_installSnapshot_Params) Peers() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s RaftTransport_installSnapshot_Params) HasPeers() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RaftTransport_installSnapshot_Params) SetPeers(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

func (s RaftTransport_installSnapshot_Params) Configuration() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s RaftTransport_installSnapshot_Params) HasConfiguration() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s RaftTransport_installSnapshot_Params) SetConfiguration(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

func (s RaftTransport_installSnapshot_Params) ConfigurationIndex() uint64 {
	return capnp.Struct(s).Uint64(32)
}

func (s RaftTransport_installSnapshot_Params) SetConfigurationIndex(v uint64) {
	capnp.Struct(s).SetUint64(32, v)
}

func (s RaftTransport_installSnapshot_Params) Size() int64 {
	return int64(capnp.Struct(s).Uint64(40))
}

func (s RaftTransport_installSnapshot_Params) SetSize(v int64) {
	capnp.Struct(s).SetUint64(40, uint64(v))
}

func (s RaftTransport_installSnapshot_Params) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return []byte(p.Data()), err
}

func (s RaftTransport_installSnapshot_Params) HasData() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s RaftTransport_installSnapshot_Params) SetData(v []byte) error {
	return capnp.Struct(s).SetData(4, v)
}

// RaftTransport_installSnapshot_Params_List is a list of RaftTransport_installSnapshot_Params.
type RaftTransport_installSnapshot_Params_List = capnp.StructList[RaftTransport_installSnapshot_Params]

// NewRaftTransport_installSnapshot_Params creates a new list of RaftTransport_installSnapshot_Params.
func NewRaftTransport_installSnapshot_Params_List(s *capnp.Segment, sz int32) (RaftTransport_installSnapshot_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 5}, sz)
	return capnp.StructList[RaftTransport_installSnapshot_Params](l), err
}

// RaftTransport_installSnapshot_Params_Future is a wrapper for a RaftTransport_installSnapshot_Params promised by a client call.
type RaftTransport_installSnapshot_Params_Future struct{ *capnp.Future }

func (f RaftTransport_installSnapshot_Params_Future) Struct() (RaftTransport_installSnapshot_Params, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_installSnapshot_Params(p.Struct()), err
}
func (p RaftTransport_installSnapshot_Params_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

type RaftTransport_installSnapshot_Results capnp.Struct

// RaftTransport_installSnapshot_Results_TypeID is the unique identifier for the type RaftTransport_installSnapshot_Results.
const RaftTransport_installSnapshot_Results_TypeID = 0xa7c37ffd5aa76201

func NewRaftTransport_installSnapshot_Results(s *capnp.Segment) (RaftTransport_installSnapshot_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RaftTransport_installSnapshot_Results(st), err
}

func NewRootRaftTransport_installSnapshot_Results(s *capnp.Segment) (RaftTransport_installSnapshot_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RaftTransport_installSnapshot_Results(st), err
}

func ReadRootRaftTransport_installSnapshot_Results(msg *capnp.Message) (RaftTransport_installSnapshot_Results, error) {
	root, err := msg.Root()
	return RaftTransport_installSnapshot_Results(root.Struct()), err
}

func (s RaftTransport_installSnapshot_Results) String() string {
	str, _ := text.Marshal(0xa7c37ffd5aa76201, capnp.Struct(s))
	return str
}

func (s RaftTransport_installSnapshot_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_installSnapshot_Results) DecodeFromPtr(p capnp.Ptr) RaftTransport_installSnapshot_Results {
	return RaftTransport_installSnapshot_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_installSnapshot_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_installSnapshot_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_installSnapshot_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_installSnapshot_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_installSnapshot_Results) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_installSnapshot_Results) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_installSnapshot_Results) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_installSnapshot_Results) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaftTransport_installSnapshot_Results) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RaftTransport_installSnapshot_Results) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RaftTransport_installSnapshot_Results) Success() bool {
	return capnp.Struct(s).Bit(64)
}

func (s RaftTransport_installSnapshot_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

// RaftTransport_installSnapshot_Results_List is a list of RaftTransport_installSnapshot_Results.
type RaftTransport_installSnapshot_Results_List = capnp.StructList[RaftTransport_installSnapshot_Results]

// NewRaftTransport_installSnapshot_Results creates a new list of RaftTransport_installSnapshot_Results.
func NewRaftTransport_installSnapshot_Results_List(s *capnp.Segment, sz int32) (RaftTransport_installSnapshot_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[RaftTransport_installSnapshot_Results](l), err
}

// RaftTransport_installSnapshot_Results_Future is a wrapper for a RaftTransport_installSnapshot_Results promised by a client call.
type RaftTransport_installSnapshot_Results_Future struct{ *capnp.Future }

func (f RaftTransport_installSnapshot_Results_Future) Struct() (RaftTransport_installSnapshot_Results, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_installSnapshot_Results(p.Struct()), err
}
func (p RaftTransport_installSnapshot_Results_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

const schema_e95db835ec309ec8 = "x\xda\x9cU\x7f\x88\x1cg\x19~\x9f\xf9f\xb3{\xd7" +
	"\xac{\xc3,(M\xe0jI\xd1\x1ei\xc8\xdd\x19\x9a" +
	"\x1c\xe2\xed\x1d\x17L\xf0\xae\xec\xb7\x9b_\x84\x16on" +
	"\xe7\xbb\xbb\x8d\xb73s3si\x92\x1a.M+\xf6" +
	"$B\xd3\x1fXc#\x0d44--&\xa8XC" +
	"A\xa5\x7fX\xa1\xa0E\xf4\x0fk\xff\x10,R\xb1\x08" +
	"\xa2\x82\x82\x8e\xbc\xb3;3{\x97\xeby\xcd\x9f\xfb\xec" +
	"\xf7\xbd\xf3\xbc\xcf\xf7\xbc\xcf\xbb\xbb\xa6W\xf4\xc1\xe2\xfd" +
	"[H\x93\x07r[\xa2?\xefz\xac\xf1\xf7'\xbep" +
	"\x81\x8cmZ\xb4\xf5\xc3\xe9\xeb\x85\xb1\xbd\xdf'\xc20" +
	"\xc4\x9d0\x0d\x91'2\x8b\xe2[\x84\xe8\xee\xcb\xa3\xe6" +
	"\xe1-\x9f|\x9a\x8cm \xca!O4\xac\x84\x0f\x82" +
	"\xb9(F\x09\xd1\xf8#\xb3C[\x7f\xff\xd7\xef\x90\xdc" +
	"\x06d\xb5r\x1a\x9f\xbc(\x06`^\x89\xcb]\x16\xdf" +
	"#D\x98y\xe9\xf8\x7f\x96\xdf|\x89OkI\xbd=" +
	"\xfa%\xae\xb7_\xe7\x13\xe7n>\xdd8\xf6\xee#\xaf" +
	"\xf0\x89-D\xb9\x1c\x9fxO\x7f\x0a\x84\xe1\x0fuW" +
	"\xa3\xae\x8f\x18E\x11\xbd\xf5\xdd\xdd\x7f\xd9\xf3\xfaC\x1f" +
	"\x10\xc1<\x9b\xff\x9d\xb9\x92\xbf\x9fh\xf8\xb5\xfc\x17a" +
	"\xae\x14\xf2D\xd1\xcd__=\xfau\xeb\xb7?iw" +
	"\xa0s\xb9\xc5\xc2y\x90\x1e\x0d\xdd|3|\xfb>\xef" +
	"\xe7\xdd\xbd=T8\xc1\\\x9a\x05\xee\xed\xbf\xdb\x1fX" +
	"\xdc\xfe\xe4\x8f~\xc1\\\xf45\xbd\x99+\x85\x7f\x9b\xcf" +
	"\x16\xe2.\x0bGA\x88v\\\x9c\x9e\xba\xf2\xe5\xcf\xfc" +
	"\xb2\xebC\xef\xf7\x9c\xe1\x0f=6\xfd\xaf\xbf\xfd\xf1\xd3" +
	"\xf7\xfc*\xe9:\xd6\xe6\x1d\xfe\x0f\xe6{=\x7f\"D" +
	"\xef\x1e\xb9\xebK\xd7\x9e}\xff\x1d>!\x12.7z" +
	"\xbf\xc1]\xff\xac\xb7\x9f\xcb?S\x14\xd2\xdf\xfe\x8f\x0f" +
	"b2I\x91\xdf\xdc\xc1O1\xfc\x87;b\x06\x17\x9f" +
	"\x1f\xea[<[\xfcgR\x85\x85\x1f\x1e+\x9e\xe7#" +
	"S\xc5\xa3\xa0\xfb\xa2Y\xd7\x9d\xb1\xfc]\x0day\x8e" +
	"7R\xb3f\xc3C\xbe\xe5\x04\x9e\xeb\x87\xbb&\xdd\xb9" +
	"C\xa7\x85\xa7\xaa\x80\xfc\x14\x135\xc6\xc6\x89\x00c\xdf" +
	"\x00\x114c\xf0)\"\x08c\xf0\x15\"\xe8\xc6 \xff" +
	"\x973\xee\xf5\x89\x96\x1bn\xabe9v\xc9q]/" +
	"\xb2l\xbb\xaa\x94?\x01\xe5\xf9\xaaa\x85\x0av\xe4\xab" +
	"\x96{RU\x15\x94?\x11\xc3%+T\xf6\xf2\x8c\xe5" +
	"\xfbM\xe5G\x0d\xd7\x99m\xce-\xf9\xd4o\x85M\xd7" +
	"IY\xea\xeb\xb0\x0c\x9b-\xe5.\x85\x0f\xb8\x0f\xef\xa8" +
	"\xa9\xfe`i!\x0c\xa4.t\"\x1dDFq\x84H" +
	"\x16\x04dY\xc3\xe8\xbc\xb2l\xe5\xa3/3)\x01}" +
	"\x84\x0dU\xa8y\x8d\x03\xaa\xc4\x17Y\x87\xadi\xe5\xfd" +
	"\xe3D\xb2\" '5\x00e0v\xf0N\"9!" +
	" \xab\x1a\x0c\x0d\xe5X\xb4\xa9\x01\"y@@\x1e\xd2" +
	"\xb0|R\xf9A\xd3u\x90#\x0d9\x82h\xda(\x92" +
	"\x86\"\xa1d\xd9\xb6\x9f\xfcH\x19\xe5\xd6a\xd4t\x82" +
	"\xd0ZX\xa8;\x96\x17\xcc\xbb\xe1\x8e\x9a\x0a\x96\x16D" +
	"\x18t\x93\x1bY\x87\xdc@7\xb9J\x87\xdcxF\xee" +
	"#\xf5)\x85\xcao\xa1\x874\xf4\x10\x96\x83\xa5FC" +
	"\x05\x01@\x1a\xf01\xa9V-\xdfj!\x90;\x13\xa6" +
	"\xe6=\x18!\xaa\xdf\x05\x81\xfaN\xa4d\xcd{q\x9e" +
	"\xa8\xfeY\x86?\x87LLs\x10\x03D\xf5\x9d\x8c\xef" +
	"e\\\xa0\xcc\xd66\xf7\xc4ev3\xfey\xc6u\xad" +
	"\xccSa\xee\xc3\x09\xa2\xfa^\xc6'\x18\xcf\x892r" +
	"D\xe6\x18f\x88\xea\x15\xc6'\x19\xdf\xa2\x959^\xcc" +
	"\x83\x18\"\xaaO0^e</\xca<{\xe6\x14|" +
	"\xa2\xfa$\xe3\xc7\x18/\xe8e\x14\x88\xcc\xc3\xb8DT" +
	"?\xc6\xb8\xcdxO\xae\x8c\x1e\"\xd3\x8ay>\xc8\xf8" +
	"<\xe3\xbdz\x19\xbdD\xa6\x8a\xf1i\xc6\x17\xb0\x91%" +
	"\x83\x8ed8\xd2v\x0c%\x96Y\xf5\x18\xa3\x0b\xed\xfb" +
	"\x89m\x16\xac \x9ct\xe7\x0eR\xc9\xb1\xd5\xa9\xe4T" +
	"\x02\x1f\xa2|\xd7\xdd~O)?H\xaf\xae\x99\xb9[" +
	"p\xc4\xf0A\xc7\x16Y\xe1R\xd0<\xa3Rb\xb6\x15" +
	"Z\xb7\x18X[\xeb\x0a\xe1\x87r+\xba\x16\x85a\xd4" +
	"\xba\x16\x901\x9e\xc5\xacQ\xbc;\x8a\xc7\xcf\xb2\x15\xc1" +
	"_\x8e\x03\xc9S\xf9IwN\x96E\x8e(\xcdX$" +
	"\xa9n\\<A\x9a\xb1\x92G\x96~H\xc2\xd48\xeb" +
	"\x93f,\xe5\xa1\xa5\xe1\x89$\x8a\x8d\xe6\x0ci\x86\x95" +
	"\x87H\xd7\x00\x92]g\x1c>N\x9a1\x95\x87\x9en" +
	"#$\x8b\xcb\x18;O\x9a\xb1/\x1fY\x9e\xa7\x1c\xbb" +
	"\x1eR\xc9WV\xab\x82\x0e\xb0\xdf\xa1\xfe\xd0o\xaa\xa0" +
	"\x82\xc8W\x8bK*\x08\x8fP\xde\x0dU\x05Q\x92\\" +
	"$\xdc\x87+\x88\x92YA\xe7\xe5\xa9\x82*2!{" +
	"\xd7\x19\xaf\xe4\xa3\xfc\xc9v\x0c\x84\x01%\x176\xce\xca" +
	"\xaaU\xf2\xad\xd6\xedG\xe5-\xef:\xda\xde\x18\xf1\xb2" +
	"Hk~{\x88H># _\xd0`$At\x99" +
	"\x83\xe89\x01\xf9\"\x0fv\xa1\x1dDW\x18|^@" +
	"^\xd3\x00\x11\x0f\xb5q\x95\xb1\x17\x04\xe4\xab<\xd1\x88" +
	"'\xdax\xf98\x91\xbc& \x7f\x90\x8d\xb3q\x83\xc1" +
	"\xeb\x02\xf2\x0d\x0d\xfd\xcdn\xef\xaf\x1a\x97Rx\xdaS" +
	"(ev#\xa0\xb4\xd6\xb9\xeaT\xa8\x9c\xa0\xe9\x92p" +
	"\xb2\xe9h+\xadl\x12ca:V\x1b\xad\xa5UO" +
	"3\x1a\xe7^\xb0\xe1\x85\xc4\x1dn\xa8v\xd4F\xdbo" +
	")\xfbR%-~\x9d\x07\x05\xe4|\x96\xe8\x8a\xf5\x99" +
	"\x16\x90\x0b]\xeb\xa6\xc9\x92\xdb\x02\xd2\xe3x\xac\xb4\x95" +
	"lq\xcc\xcf\x0b\xc8p\xb31\xbf:\x1d\x96\xe7|\xcb" +
	"\x09\x95\xbd\xa9\xd0O\x9c\x1f\xfb>\xb5%\xc9r\xda\xcc" +
	"Yn\xe6\x94\x80|<k\xe6Qn\xe6\xab\x02\xf2\x89" +
	"\xaef\xbe\xc6\xbc\xcf\x09\xc8\x0b\xdc\xcc\xb9v3+\x0c" +
	">. \x9fd[<\xda\xb6\xc57\xcf\x10\xc9\x0b\x02" +
	"\xf2\xb9M/\xb2N*~\xe4bs\xdc\x9a\x0a\xfd\xd3" +
	"\xe34j5\xbe\xe2\xce\xce\xde\xd2\xfc\xff{\xc6j\x7f" +
	"\xfc\xec\xdd\xf30\x92\xcd\xc3\xfa\xe3\xd0i\xfcJ\xad\xcb" +
	"\xfa\x9d%g\xbc|\xa2\xcb\xfa\x9d\x0dg\xdc\x98\xc9\xac" +
	"o\xe4~\xda\x9e\x87\x1f_\"\x92o\x08\xc8\xb76\xab" +
	"F\xd4\xb0\x1c\xbbi[!A\xdd\xd6:\x89\xda\xab(" +
	"\x98G\xd3\x8b\xe5\x98\x15\xca\xbf\x0d\xbf\xb4G\x85nK" +
	"\xb4\x91,CR\xd1\xae\xb2h/\x0a\xc8\xeb]\xa2\xbd" +
	"\xc6\xa2\xbd* _g\xd1\xb4\xb6h?\x1c\xef(\xf9" +
	"\xf6fE[\xbb~=_\x9d\x9ct\xe7\xf6S\xc9\x09" +
	"\xfd\xd3\xa92\x1dx\xb5^\xcb\xaa\xdd0>A\xa8\x0a" +
	"\xa0/\xdb{\x04\x06\xff\x17\x00\x00\xff\xff\"\xd4\\\x8b"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_e95db835ec309ec8,
		Nodes: []uint64{
			0x8c3e88f463832eea,
			0x93170655133f9d22,
			0x9befdc0c32667b42,
			0xa7c37ffd5aa76201,
			0xaa7bdb586393ba80,
			0xb3384108b060ed0c,
			0xbfd6618757a5d3ba,
			0xc7702dcc74c3ba32,
			0xc9b7901c714e1cfe,
			0xcf275fa14d609124,
			0xd02521e4f2f96083,
			0xd1e595a84b2056db,
			0xe9f51c7251030d94,
			0xf60d7d7110329c91,
		},
		Compressed: true,
	})
}
