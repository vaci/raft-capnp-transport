// Code generated by capnpc-go. DO NOT EDIT.

package foobar

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	bs "github.com/vaci/raft-capnp-transport/bs"
)

type RaftTransport capnp.Client

// RaftTransport_TypeID is the unique identifier for the type RaftTransport.
const RaftTransport_TypeID = 0xb3384108b060ed0c

func (c RaftTransport) AppendStream(ctx context.Context, params func(RaftTransport_appendStream_Params) error) (RaftTransport_appendStream_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      0,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "appendStream",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RaftTransport_appendStream_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RaftTransport_appendStream_Results_Future{Future: ans.Future()}, release

}

func (c RaftTransport) AppendEntries(ctx context.Context, params func(RaftTransport_appendEntries_Params) error) (RaftTransport_appendEntries_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      1,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "appendEntries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 24, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RaftTransport_appendEntries_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RaftTransport_appendEntries_Results_Future{Future: ans.Future()}, release

}

func (c RaftTransport) RequestVote(ctx context.Context, params func(RaftTransport_requestVote_Params) error) (RaftTransport_requestVote_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      2,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "requestVote",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 32, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RaftTransport_requestVote_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RaftTransport_requestVote_Results_Future{Future: ans.Future()}, release

}

func (c RaftTransport) TimeoutNow(ctx context.Context, params func(RaftTransport_timeoutNow_Params) error) (RaftTransport_timeoutNow_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      3,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "timeoutNow",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RaftTransport_timeoutNow_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RaftTransport_timeoutNow_Results_Future{Future: ans.Future()}, release

}

func (c RaftTransport) InstallSnapshot(ctx context.Context, params func(RaftTransport_installSnapshot_Params) error) (RaftTransport_installSnapshot_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      4,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "installSnapshot",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 48, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RaftTransport_installSnapshot_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RaftTransport_installSnapshot_Results_Future{Future: ans.Future()}, release

}

func (c RaftTransport) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c RaftTransport) String() string {
	return "RaftTransport(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c RaftTransport) AddRef() RaftTransport {
	return RaftTransport(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c RaftTransport) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c RaftTransport) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c RaftTransport) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (RaftTransport) DecodeFromPtr(p capnp.Ptr) RaftTransport {
	return RaftTransport(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c RaftTransport) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c RaftTransport) IsSame(other RaftTransport) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c RaftTransport) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c RaftTransport) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A RaftTransport_Server is a RaftTransport with a local implementation.
type RaftTransport_Server interface {
	AppendStream(context.Context, RaftTransport_appendStream) error

	AppendEntries(context.Context, RaftTransport_appendEntries) error

	RequestVote(context.Context, RaftTransport_requestVote) error

	TimeoutNow(context.Context, RaftTransport_timeoutNow) error

	InstallSnapshot(context.Context, RaftTransport_installSnapshot) error
}

// RaftTransport_NewServer creates a new Server from an implementation of RaftTransport_Server.
func RaftTransport_NewServer(s RaftTransport_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RaftTransport_Methods(nil, s), s, c)
}

// RaftTransport_ServerToClient creates a new Client from an implementation of RaftTransport_Server.
// The caller is responsible for calling Release on the returned Client.
func RaftTransport_ServerToClient(s RaftTransport_Server) RaftTransport {
	return RaftTransport(capnp.NewClient(RaftTransport_NewServer(s)))
}

// RaftTransport_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RaftTransport_Methods(methods []server.Method, s RaftTransport_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      0,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "appendStream",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AppendStream(ctx, RaftTransport_appendStream{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      1,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "appendEntries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AppendEntries(ctx, RaftTransport_appendEntries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      2,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "requestVote",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RequestVote(ctx, RaftTransport_requestVote{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      3,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "timeoutNow",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TimeoutNow(ctx, RaftTransport_timeoutNow{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb3384108b060ed0c,
			MethodID:      4,
			InterfaceName: "foobar.capnp:RaftTransport",
			MethodName:    "installSnapshot",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.InstallSnapshot(ctx, RaftTransport_installSnapshot{call})
		},
	})

	return methods
}

// RaftTransport_appendStream holds the state for a server call to RaftTransport.appendStream.
// See server.Call for documentation.
type RaftTransport_appendStream struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RaftTransport_appendStream) Args() RaftTransport_appendStream_Params {
	return RaftTransport_appendStream_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RaftTransport_appendStream) AllocResults() (RaftTransport_appendStream_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RaftTransport_appendStream_Results(r), err
}

// RaftTransport_appendEntries holds the state for a server call to RaftTransport.appendEntries.
// See server.Call for documentation.
type RaftTransport_appendEntries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RaftTransport_appendEntries) Args() RaftTransport_appendEntries_Params {
	return RaftTransport_appendEntries_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RaftTransport_appendEntries) AllocResults() (RaftTransport_appendEntries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RaftTransport_appendEntries_Results(r), err
}

// RaftTransport_requestVote holds the state for a server call to RaftTransport.requestVote.
// See server.Call for documentation.
type RaftTransport_requestVote struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RaftTransport_requestVote) Args() RaftTransport_requestVote_Params {
	return RaftTransport_requestVote_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RaftTransport_requestVote) AllocResults() (RaftTransport_requestVote_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return RaftTransport_requestVote_Results(r), err
}

// RaftTransport_timeoutNow holds the state for a server call to RaftTransport.timeoutNow.
// See server.Call for documentation.
type RaftTransport_timeoutNow struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RaftTransport_timeoutNow) Args() RaftTransport_timeoutNow_Params {
	return RaftTransport_timeoutNow_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RaftTransport_timeoutNow) AllocResults() (RaftTransport_timeoutNow_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RaftTransport_timeoutNow_Results(r), err
}

// RaftTransport_installSnapshot holds the state for a server call to RaftTransport.installSnapshot.
// See server.Call for documentation.
type RaftTransport_installSnapshot struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RaftTransport_installSnapshot) Args() RaftTransport_installSnapshot_Params {
	return RaftTransport_installSnapshot_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RaftTransport_installSnapshot) AllocResults() (RaftTransport_installSnapshot_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return RaftTransport_installSnapshot_Results(r), err
}

// RaftTransport_List is a list of RaftTransport.
type RaftTransport_List = capnp.CapList[RaftTransport]

// NewRaftTransport creates a new list of RaftTransport.
func NewRaftTransport_List(s *capnp.Segment, sz int32) (RaftTransport_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[RaftTransport](l), err
}

type RaftTransport_RpcHeader capnp.Struct

// RaftTransport_RpcHeader_TypeID is the unique identifier for the type RaftTransport_RpcHeader.
const RaftTransport_RpcHeader_TypeID = 0x9befdc0c32667b42

func NewRaftTransport_RpcHeader(s *capnp.Segment) (RaftTransport_RpcHeader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaftTransport_RpcHeader(st), err
}

func NewRootRaftTransport_RpcHeader(s *capnp.Segment) (RaftTransport_RpcHeader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaftTransport_RpcHeader(st), err
}

func ReadRootRaftTransport_RpcHeader(msg *capnp.Message) (RaftTransport_RpcHeader, error) {
	root, err := msg.Root()
	return RaftTransport_RpcHeader(root.Struct()), err
}

func (s RaftTransport_RpcHeader) String() string {
	str, _ := text.Marshal(0x9befdc0c32667b42, capnp.Struct(s))
	return str
}

func (s RaftTransport_RpcHeader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_RpcHeader) DecodeFromPtr(p capnp.Ptr) RaftTransport_RpcHeader {
	return RaftTransport_RpcHeader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_RpcHeader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_RpcHeader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_RpcHeader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_RpcHeader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_RpcHeader) Version() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s RaftTransport_RpcHeader) SetVersion(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s RaftTransport_RpcHeader) Id() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s RaftTransport_RpcHeader) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_RpcHeader) SetId(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s RaftTransport_RpcHeader) Addr() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s RaftTransport_RpcHeader) HasAddr() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaftTransport_RpcHeader) SetAddr(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// RaftTransport_RpcHeader_List is a list of RaftTransport_RpcHeader.
type RaftTransport_RpcHeader_List = capnp.StructList[RaftTransport_RpcHeader]

// NewRaftTransport_RpcHeader creates a new list of RaftTransport_RpcHeader.
func NewRaftTransport_RpcHeader_List(s *capnp.Segment, sz int32) (RaftTransport_RpcHeader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[RaftTransport_RpcHeader](l), err
}

// RaftTransport_RpcHeader_Future is a wrapper for a RaftTransport_RpcHeader promised by a client call.
type RaftTransport_RpcHeader_Future struct{ *capnp.Future }

func (f RaftTransport_RpcHeader_Future) Struct() (RaftTransport_RpcHeader, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_RpcHeader(p.Struct()), err
}

type RaftTransport_LogType uint16

// RaftTransport_LogType_TypeID is the unique identifier for the type RaftTransport_LogType.
const RaftTransport_LogType_TypeID = 0x8c3e88f463832eea

// Values of RaftTransport_LogType.
const (
	RaftTransport_LogType_command              RaftTransport_LogType = 0
	RaftTransport_LogType_noop                 RaftTransport_LogType = 1
	RaftTransport_LogType_addPeerDeprecated    RaftTransport_LogType = 2
	RaftTransport_LogType_removePeerDeprecated RaftTransport_LogType = 3
	RaftTransport_LogType_barrier              RaftTransport_LogType = 4
	RaftTransport_LogType_configuration        RaftTransport_LogType = 5
)

// String returns the enum's constant name.
func (c RaftTransport_LogType) String() string {
	switch c {
	case RaftTransport_LogType_command:
		return "command"
	case RaftTransport_LogType_noop:
		return "noop"
	case RaftTransport_LogType_addPeerDeprecated:
		return "addPeerDeprecated"
	case RaftTransport_LogType_removePeerDeprecated:
		return "removePeerDeprecated"
	case RaftTransport_LogType_barrier:
		return "barrier"
	case RaftTransport_LogType_configuration:
		return "configuration"

	default:
		return ""
	}
}

// RaftTransport_LogTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func RaftTransport_LogTypeFromString(c string) RaftTransport_LogType {
	switch c {
	case "command":
		return RaftTransport_LogType_command
	case "noop":
		return RaftTransport_LogType_noop
	case "addPeerDeprecated":
		return RaftTransport_LogType_addPeerDeprecated
	case "removePeerDeprecated":
		return RaftTransport_LogType_removePeerDeprecated
	case "barrier":
		return RaftTransport_LogType_barrier
	case "configuration":
		return RaftTransport_LogType_configuration

	default:
		return 0
	}
}

type RaftTransport_LogType_List = capnp.EnumList[RaftTransport_LogType]

func NewRaftTransport_LogType_List(s *capnp.Segment, sz int32) (RaftTransport_LogType_List, error) {
	return capnp.NewEnumList[RaftTransport_LogType](s, sz)
}

type RaftTransport_Log capnp.Struct

// RaftTransport_Log_TypeID is the unique identifier for the type RaftTransport_Log.
const RaftTransport_Log_TypeID = 0xc9b7901c714e1cfe

func NewRaftTransport_Log(s *capnp.Segment) (RaftTransport_Log, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return RaftTransport_Log(st), err
}

func NewRootRaftTransport_Log(s *capnp.Segment) (RaftTransport_Log, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return RaftTransport_Log(st), err
}

func ReadRootRaftTransport_Log(msg *capnp.Message) (RaftTransport_Log, error) {
	root, err := msg.Root()
	return RaftTransport_Log(root.Struct()), err
}

func (s RaftTransport_Log) String() string {
	str, _ := text.Marshal(0xc9b7901c714e1cfe, capnp.Struct(s))
	return str
}

func (s RaftTransport_Log) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_Log) DecodeFromPtr(p capnp.Ptr) RaftTransport_Log {
	return RaftTransport_Log(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_Log) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_Log) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_Log) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_Log) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_Log) Index() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RaftTransport_Log) SetIndex(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RaftTransport_Log) Term() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RaftTransport_Log) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s RaftTransport_Log) Type() RaftTransport_LogType {
	return RaftTransport_LogType(capnp.Struct(s).Uint16(16))
}

func (s RaftTransport_Log) SetType(v RaftTransport_LogType) {
	capnp.Struct(s).SetUint16(16, uint16(v))
}

func (s RaftTransport_Log) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s RaftTransport_Log) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_Log) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s RaftTransport_Log) Extensions() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s RaftTransport_Log) HasExtensions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaftTransport_Log) SetExtensions(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s RaftTransport_Log) AppendedAt() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s RaftTransport_Log) SetAppendedAt(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

// RaftTransport_Log_List is a list of RaftTransport_Log.
type RaftTransport_Log_List = capnp.StructList[RaftTransport_Log]

// NewRaftTransport_Log creates a new list of RaftTransport_Log.
func NewRaftTransport_Log_List(s *capnp.Segment, sz int32) (RaftTransport_Log_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[RaftTransport_Log](l), err
}

// RaftTransport_Log_Future is a wrapper for a RaftTransport_Log promised by a client call.
type RaftTransport_Log_Future struct{ *capnp.Future }

func (f RaftTransport_Log_Future) Struct() (RaftTransport_Log, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_Log(p.Struct()), err
}

type RaftTransport_appendStream_Params capnp.Struct

// RaftTransport_appendStream_Params_TypeID is the unique identifier for the type RaftTransport_appendStream_Params.
const RaftTransport_appendStream_Params_TypeID = 0xcf275fa14d609124

func NewRaftTransport_appendStream_Params(s *capnp.Segment) (RaftTransport_appendStream_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RaftTransport_appendStream_Params(st), err
}

func NewRootRaftTransport_appendStream_Params(s *capnp.Segment) (RaftTransport_appendStream_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RaftTransport_appendStream_Params(st), err
}

func ReadRootRaftTransport_appendStream_Params(msg *capnp.Message) (RaftTransport_appendStream_Params, error) {
	root, err := msg.Root()
	return RaftTransport_appendStream_Params(root.Struct()), err
}

func (s RaftTransport_appendStream_Params) String() string {
	str, _ := text.Marshal(0xcf275fa14d609124, capnp.Struct(s))
	return str
}

func (s RaftTransport_appendStream_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_appendStream_Params) DecodeFromPtr(p capnp.Ptr) RaftTransport_appendStream_Params {
	return RaftTransport_appendStream_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_appendStream_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_appendStream_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_appendStream_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_appendStream_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// RaftTransport_appendStream_Params_List is a list of RaftTransport_appendStream_Params.
type RaftTransport_appendStream_Params_List = capnp.StructList[RaftTransport_appendStream_Params]

// NewRaftTransport_appendStream_Params creates a new list of RaftTransport_appendStream_Params.
func NewRaftTransport_appendStream_Params_List(s *capnp.Segment, sz int32) (RaftTransport_appendStream_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RaftTransport_appendStream_Params](l), err
}

// RaftTransport_appendStream_Params_Future is a wrapper for a RaftTransport_appendStream_Params promised by a client call.
type RaftTransport_appendStream_Params_Future struct{ *capnp.Future }

func (f RaftTransport_appendStream_Params_Future) Struct() (RaftTransport_appendStream_Params, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_appendStream_Params(p.Struct()), err
}

type RaftTransport_appendStream_Results capnp.Struct

// RaftTransport_appendStream_Results_TypeID is the unique identifier for the type RaftTransport_appendStream_Results.
const RaftTransport_appendStream_Results_TypeID = 0xbfd6618757a5d3ba

func NewRaftTransport_appendStream_Results(s *capnp.Segment) (RaftTransport_appendStream_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RaftTransport_appendStream_Results(st), err
}

func NewRootRaftTransport_appendStream_Results(s *capnp.Segment) (RaftTransport_appendStream_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RaftTransport_appendStream_Results(st), err
}

func ReadRootRaftTransport_appendStream_Results(msg *capnp.Message) (RaftTransport_appendStream_Results, error) {
	root, err := msg.Root()
	return RaftTransport_appendStream_Results(root.Struct()), err
}

func (s RaftTransport_appendStream_Results) String() string {
	str, _ := text.Marshal(0xbfd6618757a5d3ba, capnp.Struct(s))
	return str
}

func (s RaftTransport_appendStream_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_appendStream_Results) DecodeFromPtr(p capnp.Ptr) RaftTransport_appendStream_Results {
	return RaftTransport_appendStream_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_appendStream_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_appendStream_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_appendStream_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_appendStream_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// RaftTransport_appendStream_Results_List is a list of RaftTransport_appendStream_Results.
type RaftTransport_appendStream_Results_List = capnp.StructList[RaftTransport_appendStream_Results]

// NewRaftTransport_appendStream_Results creates a new list of RaftTransport_appendStream_Results.
func NewRaftTransport_appendStream_Results_List(s *capnp.Segment, sz int32) (RaftTransport_appendStream_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RaftTransport_appendStream_Results](l), err
}

// RaftTransport_appendStream_Results_Future is a wrapper for a RaftTransport_appendStream_Results promised by a client call.
type RaftTransport_appendStream_Results_Future struct{ *capnp.Future }

func (f RaftTransport_appendStream_Results_Future) Struct() (RaftTransport_appendStream_Results, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_appendStream_Results(p.Struct()), err
}

type RaftTransport_appendEntries_Params capnp.Struct

// RaftTransport_appendEntries_Params_TypeID is the unique identifier for the type RaftTransport_appendEntries_Params.
const RaftTransport_appendEntries_Params_TypeID = 0xf60d7d7110329c91

func NewRaftTransport_appendEntries_Params(s *capnp.Segment) (RaftTransport_appendEntries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return RaftTransport_appendEntries_Params(st), err
}

func NewRootRaftTransport_appendEntries_Params(s *capnp.Segment) (RaftTransport_appendEntries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return RaftTransport_appendEntries_Params(st), err
}

func ReadRootRaftTransport_appendEntries_Params(msg *capnp.Message) (RaftTransport_appendEntries_Params, error) {
	root, err := msg.Root()
	return RaftTransport_appendEntries_Params(root.Struct()), err
}

func (s RaftTransport_appendEntries_Params) String() string {
	str, _ := text.Marshal(0xf60d7d7110329c91, capnp.Struct(s))
	return str
}

func (s RaftTransport_appendEntries_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_appendEntries_Params) DecodeFromPtr(p capnp.Ptr) RaftTransport_appendEntries_Params {
	return RaftTransport_appendEntries_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_appendEntries_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_appendEntries_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_appendEntries_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_appendEntries_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_appendEntries_Params) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_appendEntries_Params) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_appendEntries_Params) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_appendEntries_Params) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaftTransport_appendEntries_Params) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RaftTransport_appendEntries_Params) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RaftTransport_appendEntries_Params) Leader() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s RaftTransport_appendEntries_Params) HasLeader() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaftTransport_appendEntries_Params) SetLeader(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s RaftTransport_appendEntries_Params) PrevLogEntry() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RaftTransport_appendEntries_Params) SetPrevLogEntry(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s RaftTransport_appendEntries_Params) PrevLogTerm() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s RaftTransport_appendEntries_Params) SetPrevLogTerm(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s RaftTransport_appendEntries_Params) Entries() (RaftTransport_Log_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return RaftTransport_Log_List(p.List()), err
}

func (s RaftTransport_appendEntries_Params) HasEntries() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RaftTransport_appendEntries_Params) SetEntries(v RaftTransport_Log_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated RaftTransport_Log_List, preferring placement in s's segment.
func (s RaftTransport_appendEntries_Params) NewEntries(n int32) (RaftTransport_Log_List, error) {
	l, err := NewRaftTransport_Log_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return RaftTransport_Log_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// RaftTransport_appendEntries_Params_List is a list of RaftTransport_appendEntries_Params.
type RaftTransport_appendEntries_Params_List = capnp.StructList[RaftTransport_appendEntries_Params]

// NewRaftTransport_appendEntries_Params creates a new list of RaftTransport_appendEntries_Params.
func NewRaftTransport_appendEntries_Params_List(s *capnp.Segment, sz int32) (RaftTransport_appendEntries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return capnp.StructList[RaftTransport_appendEntries_Params](l), err
}

// RaftTransport_appendEntries_Params_Future is a wrapper for a RaftTransport_appendEntries_Params promised by a client call.
type RaftTransport_appendEntries_Params_Future struct{ *capnp.Future }

func (f RaftTransport_appendEntries_Params_Future) Struct() (RaftTransport_appendEntries_Params, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_appendEntries_Params(p.Struct()), err
}
func (p RaftTransport_appendEntries_Params_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

type RaftTransport_appendEntries_Results capnp.Struct

// RaftTransport_appendEntries_Results_TypeID is the unique identifier for the type RaftTransport_appendEntries_Results.
const RaftTransport_appendEntries_Results_TypeID = 0xd1e595a84b2056db

func NewRaftTransport_appendEntries_Results(s *capnp.Segment) (RaftTransport_appendEntries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RaftTransport_appendEntries_Results(st), err
}

func NewRootRaftTransport_appendEntries_Results(s *capnp.Segment) (RaftTransport_appendEntries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RaftTransport_appendEntries_Results(st), err
}

func ReadRootRaftTransport_appendEntries_Results(msg *capnp.Message) (RaftTransport_appendEntries_Results, error) {
	root, err := msg.Root()
	return RaftTransport_appendEntries_Results(root.Struct()), err
}

func (s RaftTransport_appendEntries_Results) String() string {
	str, _ := text.Marshal(0xd1e595a84b2056db, capnp.Struct(s))
	return str
}

func (s RaftTransport_appendEntries_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_appendEntries_Results) DecodeFromPtr(p capnp.Ptr) RaftTransport_appendEntries_Results {
	return RaftTransport_appendEntries_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_appendEntries_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_appendEntries_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_appendEntries_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_appendEntries_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_appendEntries_Results) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_appendEntries_Results) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_appendEntries_Results) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_appendEntries_Results) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaftTransport_appendEntries_Results) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RaftTransport_appendEntries_Results) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RaftTransport_appendEntries_Results) LastLog() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RaftTransport_appendEntries_Results) SetLastLog(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s RaftTransport_appendEntries_Results) Success() bool {
	return capnp.Struct(s).Bit(128)
}

func (s RaftTransport_appendEntries_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(128, v)
}

func (s RaftTransport_appendEntries_Results) NoRetryBackoff() bool {
	return capnp.Struct(s).Bit(129)
}

func (s RaftTransport_appendEntries_Results) SetNoRetryBackoff(v bool) {
	capnp.Struct(s).SetBit(129, v)
}

// RaftTransport_appendEntries_Results_List is a list of RaftTransport_appendEntries_Results.
type RaftTransport_appendEntries_Results_List = capnp.StructList[RaftTransport_appendEntries_Results]

// NewRaftTransport_appendEntries_Results creates a new list of RaftTransport_appendEntries_Results.
func NewRaftTransport_appendEntries_Results_List(s *capnp.Segment, sz int32) (RaftTransport_appendEntries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[RaftTransport_appendEntries_Results](l), err
}

// RaftTransport_appendEntries_Results_Future is a wrapper for a RaftTransport_appendEntries_Results promised by a client call.
type RaftTransport_appendEntries_Results_Future struct{ *capnp.Future }

func (f RaftTransport_appendEntries_Results_Future) Struct() (RaftTransport_appendEntries_Results, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_appendEntries_Results(p.Struct()), err
}
func (p RaftTransport_appendEntries_Results_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

type RaftTransport_requestVote_Params capnp.Struct

// RaftTransport_requestVote_Params_TypeID is the unique identifier for the type RaftTransport_requestVote_Params.
const RaftTransport_requestVote_Params_TypeID = 0xe9f51c7251030d94

func NewRaftTransport_requestVote_Params(s *capnp.Segment) (RaftTransport_requestVote_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return RaftTransport_requestVote_Params(st), err
}

func NewRootRaftTransport_requestVote_Params(s *capnp.Segment) (RaftTransport_requestVote_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return RaftTransport_requestVote_Params(st), err
}

func ReadRootRaftTransport_requestVote_Params(msg *capnp.Message) (RaftTransport_requestVote_Params, error) {
	root, err := msg.Root()
	return RaftTransport_requestVote_Params(root.Struct()), err
}

func (s RaftTransport_requestVote_Params) String() string {
	str, _ := text.Marshal(0xe9f51c7251030d94, capnp.Struct(s))
	return str
}

func (s RaftTransport_requestVote_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_requestVote_Params) DecodeFromPtr(p capnp.Ptr) RaftTransport_requestVote_Params {
	return RaftTransport_requestVote_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_requestVote_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_requestVote_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_requestVote_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_requestVote_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_requestVote_Params) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_requestVote_Params) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_requestVote_Params) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_requestVote_Params) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaftTransport_requestVote_Params) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RaftTransport_requestVote_Params) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RaftTransport_requestVote_Params) Candidate() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s RaftTransport_requestVote_Params) HasCandidate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaftTransport_requestVote_Params) SetCandidate(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s RaftTransport_requestVote_Params) LastLogIndex() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RaftTransport_requestVote_Params) SetLastLogIndex(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s RaftTransport_requestVote_Params) LastLogTerm() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s RaftTransport_requestVote_Params) SetLastLogTerm(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s RaftTransport_requestVote_Params) LeadershipTransfer() bool {
	return capnp.Struct(s).Bit(192)
}

func (s RaftTransport_requestVote_Params) SetLeadershipTransfer(v bool) {
	capnp.Struct(s).SetBit(192, v)
}

// RaftTransport_requestVote_Params_List is a list of RaftTransport_requestVote_Params.
type RaftTransport_requestVote_Params_List = capnp.StructList[RaftTransport_requestVote_Params]

// NewRaftTransport_requestVote_Params creates a new list of RaftTransport_requestVote_Params.
func NewRaftTransport_requestVote_Params_List(s *capnp.Segment, sz int32) (RaftTransport_requestVote_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[RaftTransport_requestVote_Params](l), err
}

// RaftTransport_requestVote_Params_Future is a wrapper for a RaftTransport_requestVote_Params promised by a client call.
type RaftTransport_requestVote_Params_Future struct{ *capnp.Future }

func (f RaftTransport_requestVote_Params_Future) Struct() (RaftTransport_requestVote_Params, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_requestVote_Params(p.Struct()), err
}
func (p RaftTransport_requestVote_Params_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

type RaftTransport_requestVote_Results capnp.Struct

// RaftTransport_requestVote_Results_TypeID is the unique identifier for the type RaftTransport_requestVote_Results.
const RaftTransport_requestVote_Results_TypeID = 0xd02521e4f2f96083

func NewRaftTransport_requestVote_Results(s *capnp.Segment) (RaftTransport_requestVote_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return RaftTransport_requestVote_Results(st), err
}

func NewRootRaftTransport_requestVote_Results(s *capnp.Segment) (RaftTransport_requestVote_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return RaftTransport_requestVote_Results(st), err
}

func ReadRootRaftTransport_requestVote_Results(msg *capnp.Message) (RaftTransport_requestVote_Results, error) {
	root, err := msg.Root()
	return RaftTransport_requestVote_Results(root.Struct()), err
}

func (s RaftTransport_requestVote_Results) String() string {
	str, _ := text.Marshal(0xd02521e4f2f96083, capnp.Struct(s))
	return str
}

func (s RaftTransport_requestVote_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_requestVote_Results) DecodeFromPtr(p capnp.Ptr) RaftTransport_requestVote_Results {
	return RaftTransport_requestVote_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_requestVote_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_requestVote_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_requestVote_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_requestVote_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_requestVote_Results) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_requestVote_Results) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_requestVote_Results) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_requestVote_Results) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaftTransport_requestVote_Results) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RaftTransport_requestVote_Results) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RaftTransport_requestVote_Results) Peers() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s RaftTransport_requestVote_Results) HasPeers() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaftTransport_requestVote_Results) SetPeers(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s RaftTransport_requestVote_Results) Granted() bool {
	return capnp.Struct(s).Bit(64)
}

func (s RaftTransport_requestVote_Results) SetGranted(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

// RaftTransport_requestVote_Results_List is a list of RaftTransport_requestVote_Results.
type RaftTransport_requestVote_Results_List = capnp.StructList[RaftTransport_requestVote_Results]

// NewRaftTransport_requestVote_Results creates a new list of RaftTransport_requestVote_Results.
func NewRaftTransport_requestVote_Results_List(s *capnp.Segment, sz int32) (RaftTransport_requestVote_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[RaftTransport_requestVote_Results](l), err
}

// RaftTransport_requestVote_Results_Future is a wrapper for a RaftTransport_requestVote_Results promised by a client call.
type RaftTransport_requestVote_Results_Future struct{ *capnp.Future }

func (f RaftTransport_requestVote_Results_Future) Struct() (RaftTransport_requestVote_Results, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_requestVote_Results(p.Struct()), err
}
func (p RaftTransport_requestVote_Results_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

type RaftTransport_timeoutNow_Params capnp.Struct

// RaftTransport_timeoutNow_Params_TypeID is the unique identifier for the type RaftTransport_timeoutNow_Params.
const RaftTransport_timeoutNow_Params_TypeID = 0xc7702dcc74c3ba32

func NewRaftTransport_timeoutNow_Params(s *capnp.Segment) (RaftTransport_timeoutNow_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RaftTransport_timeoutNow_Params(st), err
}

func NewRootRaftTransport_timeoutNow_Params(s *capnp.Segment) (RaftTransport_timeoutNow_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RaftTransport_timeoutNow_Params(st), err
}

func ReadRootRaftTransport_timeoutNow_Params(msg *capnp.Message) (RaftTransport_timeoutNow_Params, error) {
	root, err := msg.Root()
	return RaftTransport_timeoutNow_Params(root.Struct()), err
}

func (s RaftTransport_timeoutNow_Params) String() string {
	str, _ := text.Marshal(0xc7702dcc74c3ba32, capnp.Struct(s))
	return str
}

func (s RaftTransport_timeoutNow_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_timeoutNow_Params) DecodeFromPtr(p capnp.Ptr) RaftTransport_timeoutNow_Params {
	return RaftTransport_timeoutNow_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_timeoutNow_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_timeoutNow_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_timeoutNow_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_timeoutNow_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_timeoutNow_Params) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_timeoutNow_Params) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_timeoutNow_Params) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_timeoutNow_Params) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RaftTransport_timeoutNow_Params_List is a list of RaftTransport_timeoutNow_Params.
type RaftTransport_timeoutNow_Params_List = capnp.StructList[RaftTransport_timeoutNow_Params]

// NewRaftTransport_timeoutNow_Params creates a new list of RaftTransport_timeoutNow_Params.
func NewRaftTransport_timeoutNow_Params_List(s *capnp.Segment, sz int32) (RaftTransport_timeoutNow_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RaftTransport_timeoutNow_Params](l), err
}

// RaftTransport_timeoutNow_Params_Future is a wrapper for a RaftTransport_timeoutNow_Params promised by a client call.
type RaftTransport_timeoutNow_Params_Future struct{ *capnp.Future }

func (f RaftTransport_timeoutNow_Params_Future) Struct() (RaftTransport_timeoutNow_Params, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_timeoutNow_Params(p.Struct()), err
}
func (p RaftTransport_timeoutNow_Params_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

type RaftTransport_timeoutNow_Results capnp.Struct

// RaftTransport_timeoutNow_Results_TypeID is the unique identifier for the type RaftTransport_timeoutNow_Results.
const RaftTransport_timeoutNow_Results_TypeID = 0x93170655133f9d22

func NewRaftTransport_timeoutNow_Results(s *capnp.Segment) (RaftTransport_timeoutNow_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RaftTransport_timeoutNow_Results(st), err
}

func NewRootRaftTransport_timeoutNow_Results(s *capnp.Segment) (RaftTransport_timeoutNow_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RaftTransport_timeoutNow_Results(st), err
}

func ReadRootRaftTransport_timeoutNow_Results(msg *capnp.Message) (RaftTransport_timeoutNow_Results, error) {
	root, err := msg.Root()
	return RaftTransport_timeoutNow_Results(root.Struct()), err
}

func (s RaftTransport_timeoutNow_Results) String() string {
	str, _ := text.Marshal(0x93170655133f9d22, capnp.Struct(s))
	return str
}

func (s RaftTransport_timeoutNow_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_timeoutNow_Results) DecodeFromPtr(p capnp.Ptr) RaftTransport_timeoutNow_Results {
	return RaftTransport_timeoutNow_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_timeoutNow_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_timeoutNow_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_timeoutNow_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_timeoutNow_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_timeoutNow_Results) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_timeoutNow_Results) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_timeoutNow_Results) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_timeoutNow_Results) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RaftTransport_timeoutNow_Results_List is a list of RaftTransport_timeoutNow_Results.
type RaftTransport_timeoutNow_Results_List = capnp.StructList[RaftTransport_timeoutNow_Results]

// NewRaftTransport_timeoutNow_Results creates a new list of RaftTransport_timeoutNow_Results.
func NewRaftTransport_timeoutNow_Results_List(s *capnp.Segment, sz int32) (RaftTransport_timeoutNow_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RaftTransport_timeoutNow_Results](l), err
}

// RaftTransport_timeoutNow_Results_Future is a wrapper for a RaftTransport_timeoutNow_Results promised by a client call.
type RaftTransport_timeoutNow_Results_Future struct{ *capnp.Future }

func (f RaftTransport_timeoutNow_Results_Future) Struct() (RaftTransport_timeoutNow_Results, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_timeoutNow_Results(p.Struct()), err
}
func (p RaftTransport_timeoutNow_Results_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

type RaftTransport_installSnapshot_Params capnp.Struct

// RaftTransport_installSnapshot_Params_TypeID is the unique identifier for the type RaftTransport_installSnapshot_Params.
const RaftTransport_installSnapshot_Params_TypeID = 0xaa7bdb586393ba80

func NewRaftTransport_installSnapshot_Params(s *capnp.Segment) (RaftTransport_installSnapshot_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 4})
	return RaftTransport_installSnapshot_Params(st), err
}

func NewRootRaftTransport_installSnapshot_Params(s *capnp.Segment) (RaftTransport_installSnapshot_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 4})
	return RaftTransport_installSnapshot_Params(st), err
}

func ReadRootRaftTransport_installSnapshot_Params(msg *capnp.Message) (RaftTransport_installSnapshot_Params, error) {
	root, err := msg.Root()
	return RaftTransport_installSnapshot_Params(root.Struct()), err
}

func (s RaftTransport_installSnapshot_Params) String() string {
	str, _ := text.Marshal(0xaa7bdb586393ba80, capnp.Struct(s))
	return str
}

func (s RaftTransport_installSnapshot_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_installSnapshot_Params) DecodeFromPtr(p capnp.Ptr) RaftTransport_installSnapshot_Params {
	return RaftTransport_installSnapshot_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_installSnapshot_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_installSnapshot_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_installSnapshot_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_installSnapshot_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_installSnapshot_Params) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_installSnapshot_Params) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_installSnapshot_Params) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_installSnapshot_Params) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaftTransport_installSnapshot_Params) SnapshotVersion() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s RaftTransport_installSnapshot_Params) SetSnapshotVersion(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s RaftTransport_installSnapshot_Params) Term() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s RaftTransport_installSnapshot_Params) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s RaftTransport_installSnapshot_Params) Leader() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s RaftTransport_installSnapshot_Params) HasLeader() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaftTransport_installSnapshot_Params) SetLeader(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s RaftTransport_installSnapshot_Params) LastLogIndex() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s RaftTransport_installSnapshot_Params) SetLastLogIndex(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s RaftTransport_installSnapshot_Params) LastLogTerm() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s RaftTransport_installSnapshot_Params) SetLastLogTerm(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

func (s RaftTransport_installSnapshot_Params) Peers() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s RaftTransport_installSnapshot_Params) HasPeers() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RaftTransport_installSnapshot_Params) SetPeers(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

func (s RaftTransport_installSnapshot_Params) Configuration() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s RaftTransport_installSnapshot_Params) HasConfiguration() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s RaftTransport_installSnapshot_Params) SetConfiguration(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

func (s RaftTransport_installSnapshot_Params) ConfigurationIndex() uint64 {
	return capnp.Struct(s).Uint64(32)
}

func (s RaftTransport_installSnapshot_Params) SetConfigurationIndex(v uint64) {
	capnp.Struct(s).SetUint64(32, v)
}

func (s RaftTransport_installSnapshot_Params) Size() int64 {
	return int64(capnp.Struct(s).Uint64(40))
}

func (s RaftTransport_installSnapshot_Params) SetSize(v int64) {
	capnp.Struct(s).SetUint64(40, uint64(v))
}

// RaftTransport_installSnapshot_Params_List is a list of RaftTransport_installSnapshot_Params.
type RaftTransport_installSnapshot_Params_List = capnp.StructList[RaftTransport_installSnapshot_Params]

// NewRaftTransport_installSnapshot_Params creates a new list of RaftTransport_installSnapshot_Params.
func NewRaftTransport_installSnapshot_Params_List(s *capnp.Segment, sz int32) (RaftTransport_installSnapshot_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 4}, sz)
	return capnp.StructList[RaftTransport_installSnapshot_Params](l), err
}

// RaftTransport_installSnapshot_Params_Future is a wrapper for a RaftTransport_installSnapshot_Params promised by a client call.
type RaftTransport_installSnapshot_Params_Future struct{ *capnp.Future }

func (f RaftTransport_installSnapshot_Params_Future) Struct() (RaftTransport_installSnapshot_Params, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_installSnapshot_Params(p.Struct()), err
}
func (p RaftTransport_installSnapshot_Params_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}

type RaftTransport_installSnapshot_Results capnp.Struct

// RaftTransport_installSnapshot_Results_TypeID is the unique identifier for the type RaftTransport_installSnapshot_Results.
const RaftTransport_installSnapshot_Results_TypeID = 0xa7c37ffd5aa76201

func NewRaftTransport_installSnapshot_Results(s *capnp.Segment) (RaftTransport_installSnapshot_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return RaftTransport_installSnapshot_Results(st), err
}

func NewRootRaftTransport_installSnapshot_Results(s *capnp.Segment) (RaftTransport_installSnapshot_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return RaftTransport_installSnapshot_Results(st), err
}

func ReadRootRaftTransport_installSnapshot_Results(msg *capnp.Message) (RaftTransport_installSnapshot_Results, error) {
	root, err := msg.Root()
	return RaftTransport_installSnapshot_Results(root.Struct()), err
}

func (s RaftTransport_installSnapshot_Results) String() string {
	str, _ := text.Marshal(0xa7c37ffd5aa76201, capnp.Struct(s))
	return str
}

func (s RaftTransport_installSnapshot_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaftTransport_installSnapshot_Results) DecodeFromPtr(p capnp.Ptr) RaftTransport_installSnapshot_Results {
	return RaftTransport_installSnapshot_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaftTransport_installSnapshot_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaftTransport_installSnapshot_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaftTransport_installSnapshot_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaftTransport_installSnapshot_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaftTransport_installSnapshot_Results) Header() (RaftTransport_RpcHeader, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaftTransport_RpcHeader(p.Struct()), err
}

func (s RaftTransport_installSnapshot_Results) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaftTransport_installSnapshot_Results) SetHeader(v RaftTransport_RpcHeader) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated RaftTransport_RpcHeader struct, preferring placement in s's segment.
func (s RaftTransport_installSnapshot_Results) NewHeader() (RaftTransport_RpcHeader, error) {
	ss, err := NewRaftTransport_RpcHeader(capnp.Struct(s).Segment())
	if err != nil {
		return RaftTransport_RpcHeader{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaftTransport_installSnapshot_Results) Term() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RaftTransport_installSnapshot_Results) SetTerm(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RaftTransport_installSnapshot_Results) Success() bool {
	return capnp.Struct(s).Bit(64)
}

func (s RaftTransport_installSnapshot_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

func (s RaftTransport_installSnapshot_Results) Snapshot() bs.ByteStream {
	p, _ := capnp.Struct(s).Ptr(1)
	return bs.ByteStream(p.Interface().Client())
}

func (s RaftTransport_installSnapshot_Results) HasSnapshot() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaftTransport_installSnapshot_Results) SetSnapshot(v bs.ByteStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// RaftTransport_installSnapshot_Results_List is a list of RaftTransport_installSnapshot_Results.
type RaftTransport_installSnapshot_Results_List = capnp.StructList[RaftTransport_installSnapshot_Results]

// NewRaftTransport_installSnapshot_Results creates a new list of RaftTransport_installSnapshot_Results.
func NewRaftTransport_installSnapshot_Results_List(s *capnp.Segment, sz int32) (RaftTransport_installSnapshot_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[RaftTransport_installSnapshot_Results](l), err
}

// RaftTransport_installSnapshot_Results_Future is a wrapper for a RaftTransport_installSnapshot_Results promised by a client call.
type RaftTransport_installSnapshot_Results_Future struct{ *capnp.Future }

func (f RaftTransport_installSnapshot_Results_Future) Struct() (RaftTransport_installSnapshot_Results, error) {
	p, err := f.Future.Ptr()
	return RaftTransport_installSnapshot_Results(p.Struct()), err
}
func (p RaftTransport_installSnapshot_Results_Future) Header() RaftTransport_RpcHeader_Future {
	return RaftTransport_RpcHeader_Future{Future: p.Future.Field(0, nil)}
}
func (p RaftTransport_installSnapshot_Results_Future) Snapshot() bs.ByteStream {
	return bs.ByteStream(p.Future.Field(1, nil).Client())
}

const schema_e95db835ec309ec8 = "x\xda\x9cU\x7f\x88\x1cg\x19~\x9f\xf9\xf6\xc7\xfd\xda" +
	"\xec\x0e\xb3b\xdb\x9c\\[\xae\x18\x03\x0d\xb9;\xa5\xe6" +
	"\xa8\xde\xe6H0\xd1K\xd9\xef6M4X\xcc\xdc\xce" +
	"ww\x1bog&3si.5\\\x92\xb6\xd8H" +
	"\x0aM[i\x8d\x8d$\xd0\xd0\xb4TLP\xb1\x86\x82" +
	"J\x11+T\xb4\x8a\"\xb6\x7f*\xb5b\x11D\x85\x0a" +
	"u\xe4\x9d\xd9\x99\xd9K\xe2\x99\xdc\x9f\xfb\xec7\xef\xf7" +
	">\xcf\xf7\xbc\xcf\xbby]\xbe\x96\x1b)\x95\x07H\x93" +
	"\xa7\xf2\x85\xf0/\x9b\x1en\xfe\xe3\xb1O\x9f\"}\xbd" +
	"\x16\x0e\xbc\xb7\xffR\xcf\xd6O~\x97\x08c\xef\xe5o" +
	"\x83\xf1A\xbeHd\xbc\x9f\x7f\x86\x10\xdeyv\xc2\xb8" +
	"\xbf\xf0\xe1\xa7H_\x0f\xa2<\x8aDc\xb2\xe0\x81`" +
	"<P\x98 \x84\x93\x0f\xcd\x8e\x0e\xbc\xfd\xb7o\x92\\" +
	"\x0fd\xb5\xf2\x1a\x9f<Z\xd8\x08\xe3\xf1\x02\x97;Y" +
	"\xf8\x0e!\xc4\xcc\x0b\xfb>X~\xed\x05>\xadQ\xe7" +
	"\xd4\x1d\xc53\\o\xa4\xf8\x0e!<v\xe5\xa9\xe6\xe7" +
	"\xdfz\xe8%>Q \xca\xe7\xf8Do\xcf\x93 \x8c" +
	"\xdd\xdas\x8fF]\x97\xe8%\x11\xbe\xfe\xad\xcd\x7f\xfd" +
	"\xc4+\x0f\xbcK\x04\xa3\xdd\xf7\x07c\xa9\xef\x1e\xa2\xb1" +
	"\xb3}\x9f\x81\xb1\xd4_$\x0a\xaf\xfc\xe6\xc2\xde\xaf\x9a" +
	"\xbf\xfbQ\xcc *g\xf6\x9f\x00\xe5\xc2\xd1+\xaf\x05" +
	"o\xdc\xed\xfe\xac\x9b\xdb\xae\xfe\x03\xdc\xcb\x17\xfa\x99\xdb" +
	"\x7f\x06\xef;8\xf8\xc4\x0f~\xce\xbd\xe4\xae\xe2f," +
	"\xf5\xff\xdbx\x94o\x18;\xde\xbf\x17\x84p\xf8\xf4\xfe" +
	"]\xe7\xbf\xf4\xd1_v]\xf4\xdb\x81#|\xd1\xc3\xfb" +
	"\xdf\xff\xfb\x1f\xef\xb8\xebW+X\xff\x84\xff\x83\xf1\x8b" +
	"\x01f\xfd\xd6\x9e\xdb?w\xf1\xeb\x7fz\x93O\x88\xa4" +
	"\x97\xf3\xa5\xaf1\xeb\xcb\xa5!.\xfftIHo\xf0" +
	"\x9f\xefF\xcd$E~\xba\x8e\x9fb\xec\xcduQ\x07" +
	"\xa7\x9f\x1b\xad\x1c<Z\xfaWRE\xf0\x91\x91\xca\x09" +
	">\xf2\xa9\xca^\xd0\x9f\xc3Y\xc7\x991\xbdMMa" +
	"\xba\xb6;>m\xce\x06\xbb=\xd3\xf6]\xc7\x0b6M" +
	"9s\xbb\x97\x84\xab\xea\x80\xbc\x85\x1b\xd5\xb7N\x12\x01" +
	"\xfa\x96\x8dD\xd0\xf4\x91'\x89 \xf4\x91\x97\x88\x90\xd3" +
	"G\xf8\xbf\xbc\xfe1\x8fh\xb9\xe9\xb4\xdb\xa6m\x95m" +
	"\xc7qC\xd3\xb2\xeaJy\xdb\xa0\\O5\xcd@\xc1" +
	"\x0a=\xd5v\x0e\xa9\xba\x82\xf2\xb6Ep\xd9\x0c\x94\xb5" +
	"<cz^Kya\xd3\xb1g[s\x8b\x1e\x0d\x99" +
	"A\xcb\xb1\xd3.s\xd7\xe92h\xb5\x95\xb3\x18\xdc\xe7" +
	"<8<\xad\x86\xfc\xc5\x85\xc0\x979\x91#\xca\x81H" +
	"/\x8d\x13\xc9\x1e\x01Y\xd501\xafLKy\xa8d" +
	"&%\xa0BXU\x85i\xb7\xb9C\x95\xf9C\xd6a" +
	" \xad\xbc}\x92H\xd6\x04\xe4\x94\x06\xa0\x0a\xc6v\xde" +
	"F$\xb7\x09\xc8\xba\x06]C5\x12m\xd7F\"\xb9" +
	"C@\xee\xd6\xb0|Hy~\xcb\xb1\x91'\x0dy\x82" +
	"hY(\x91\x86\x12\xa1lZ\x96\x97\xfcH;\xca_" +
	"\xa7\xa3\x96\xed\x07\xe6\xc2B\xc36]\x7f\xde\x09\x86\xa7" +
	"\x95\xbf\xb8 \x02_V\xd2\xe6L\xa6\xfdE\x019\x9f" +
	"5\xa7\xb8\x8f\xfd\x02r\x81\x9b\xab\xc5\xcd\xb5\x98\x85%" +
	" ]\x0d\xba@\x95}\xa2\xb7?K$\x17\x04\xe4\xe1" +
	"UD+\x07\xcak\xa3\x974\xf4\x12\x96\xfd\xc5fS" +
	"\xf9>@\x1a\xd8z~\xa79\"\x82\x1e\xce>\xd3\xf7" +
	"\xf6\xb9\xdf\xbf\xf3\xeb\xc8=7\xc9\xaenzf\x1b\xbe" +
	"\xdc\x90\x903z1N\xd4\xc8A\xa0QA\xca\xcf(" +
	"\xe1\x04Qc\x80\xe1[\x90\xe9o|\x08\x1b\x89\x1a\x15" +
	"\xc6\x07\x91\xb14n\x8d\xcaT\x19\xbf\x9d\xf1\x9cV\xe5" +
	"A2>\x82\x03D\x8dA\xc670\x9e\x17U\xe4\x89" +
	"\x8c\xbb0C\xd4\x18f|3\xe3\x05\xad\xca\x89d\xdc" +
	"\x8dQ\xa2\xc6\x06\xc6?\xcexQTy\\\x8d\x11x" +
	"D\x8d\xcd\x8c\xdf\xcbxO\xae\x8a\x1e\"c\x0b\xce\x10" +
	"5\xeee|\x07\xe3\xbd\xf9*z\x89\x8c\xedQ\x9f5" +
	"\xc6\xa7\xb0\x9a[\x13m\xb1'6\x13%nZ\xf1$" +
	"\x13\x0b\xf1\xf7\x89\xa3\x16L?\x98r\xe6vR\xd9\xb6" +
	"\xd4\xe1\xe4T\x02\xef\xa6b\xd7\xb7C\xaeR\x9e\x9f~" +
	"z\xd58^\x83#\x82w\xda\x96\xc8\x0a\x97\xfd\xd6\x11" +
	"\x954\x96>\xb8v\xf5\x83\x0b/\x90\x03\xe8Z\x1b\xba" +
	">\xdd\xb5\x8e\xf4\xc9,t\xf5\xd2\x9da4\x8c\xa6\xa5" +
	"\x08\xder\x14O\xae*N9s\xb2*\xf2Di\xe2" +
	"\"\xc9x\xfd\xf4\x01\xd2\xf4\x93EdY\x88$Z\xf5" +
	"\xa3\x1ei\xfab\x11Z\x1a\xa5H\x82Yo\xcd\x90\xa6" +
	"\x9bE\x88t) \xd9|\xfa\xfd\xfbH\xd3w\x15\x91" +
	"Kw\x13\x925\xa6o=A\x9a\xbe\xa5\x18\x9a\xae\xab" +
	"l\xab\x11P\xd9Sf\xbb\x86\x0e\xb0\xdd\xa6\xa1\xc0k" +
	")\xbf\x86\xd0S\x07\x17\x95\x1f\xec\xa1\xa2\x13\xa8\x1a\xc2" +
	"$\xc7H8\x0f\xd6\x10&c\x80d\x90j\xa8#\x13" +
	"\xb2\xef:\x93\x93\\\xcaW\xc6\xa1\x10\xf8\x94|\xb0z" +
	"r\xd6\xcd\xb2g\xb6\xd7\x1e\x9c\xd7\xbc\xebD\xbc?\xa2" +
	"\xd5\x91\xd6\xfc\xc6(\x91|Z@\x9e\xd3\xa0'\xb1t" +
	"\x96c\xe9Y\x01\xf9<\xcflO\x1cK\xe7\x19|N" +
	"@^\xd4\x00\x11\xa7\xd2\x05\xc6\xce\x09\xc8\x97yX\x11" +
	"\x0d\xab\xfe\xe2>\"yQ@~/\x9bT\xfd2\x83" +
	"\x97\x04\xe4\xab\x1a\x86Z\xddv_1!\xe5`\xc9U" +
	"(gv#\xa0L([f`\xa6\x1eW\x87\x03e" +
	"\xfb-\x87\x84\x9d\x0dD\xac\xb4\xb2Hl\x0d\xd2IZ" +
	"mI\xadx\x9a\x89(\xd2\xfcU?H\xdc\xe1\x04j" +
	"xz\"~\xcb\x9b\xca\xf7\xce\xf2i\x8dv\xe7{\xad" +
	"\x93\xef\x1c\xfa\xf3\x022\xb8\xd1|_\x19\x08\xcbs\x9e" +
	"i\x07\xcaJ\xd3~\xb5<O\x9c\x1f\xf9>\xb5%\xc9" +
	"jJ\xe6(\x939, \x1f\xc9\xc8\x1cg2_\x11" +
	"\x90\x8fu\x91y\x94\xfb>& O1\x99c1\x99" +
	"\x93\x0c>\" \x9f`[\x1c\x8fm\xf1\xf8\x11\"y" +
	"J@>{\xc3\x1b\xac\x13\x84\xffs\xa3\xd9\xce\xb4\x0a" +
	"\xbc\xa5I\x9a0\x9b_vfg\xaf!\xff\xff\x9e\xb1" +
	">\x14={\xf7<\x8cg\xf3p\xfdq\xe8\x10??" +
	"\xdde\xfddK\xbfx\xa0\xcb\xfa\x9d\xe5\xa5_\x9e\xc9" +
	"\xac\xaf\xe7\x7f\x1c\xcf\xc3\x0f\xcf\x10\xc9W\x05\xe4\xeb7" +
	"\xaaF\xd84m\xabe\x99\x01A\xadi\x83\x84\xf1\xf6" +
	"\xf1\xe7\xd1r#9f\x85\xf2\xd6\xe0\x97xThM" +
	"\xa2\x8dg\x19\x92\x8av\x81E{^@^\xea\x12\xed" +
	"\xdb,\xda\xcb\x02\xf2\x15\x16M\x8bE\xfb\xfedG\xc9" +
	"7nT\xb4\xab7\xae\xeb\xa9CS\xce\xdcv*\xdb" +
	"\x81\xb7\x94*\xd3\x81W\xea\xb5\xacb\xc2XG\xa8\x0b" +
	"\xa0\x92\xed=\x02\x83\xff\x0d\x00\x00\xff\xffS\xe1c\x9b"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_e95db835ec309ec8,
		Nodes: []uint64{
			0x8c3e88f463832eea,
			0x93170655133f9d22,
			0x9befdc0c32667b42,
			0xa7c37ffd5aa76201,
			0xaa7bdb586393ba80,
			0xb3384108b060ed0c,
			0xbfd6618757a5d3ba,
			0xc7702dcc74c3ba32,
			0xc9b7901c714e1cfe,
			0xcf275fa14d609124,
			0xd02521e4f2f96083,
			0xd1e595a84b2056db,
			0xe9f51c7251030d94,
			0xf60d7d7110329c91,
		},
		Compressed: true,
	})
}
