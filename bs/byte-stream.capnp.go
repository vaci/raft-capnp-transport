// Code generated by capnpc-go. DO NOT EDIT.

package bs

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
)

type ByteStream capnp.Client

// ByteStream_TypeID is the unique identifier for the type ByteStream.
const ByteStream_TypeID = 0xd2e7d8a0dc0a9766

func (c ByteStream) Write(ctx context.Context, params func(ByteStream_write_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2e7d8a0dc0a9766,
			MethodID:      0,
			InterfaceName: "bs/byte-stream.capnp:ByteStream",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_write_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c ByteStream) End(ctx context.Context, params func(ByteStream_end_Params) error) (ByteStream_end_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2e7d8a0dc0a9766,
			MethodID:      1,
			InterfaceName: "bs/byte-stream.capnp:ByteStream",
			MethodName:    "end",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_end_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ByteStream_end_Results_Future{Future: ans.Future()}, release

}

func (c ByteStream) GetSubstream(ctx context.Context, params func(ByteStream_getSubstream_Params) error) (ByteStream_getSubstream_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2e7d8a0dc0a9766,
			MethodID:      2,
			InterfaceName: "bs/byte-stream.capnp:ByteStream",
			MethodName:    "getSubstream",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_getSubstream_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ByteStream_getSubstream_Results_Future{Future: ans.Future()}, release

}

func (c ByteStream) StartTls(ctx context.Context, params func(ByteStream_startTls_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd2e7d8a0dc0a9766,
			MethodID:      3,
			InterfaceName: "bs/byte-stream.capnp:ByteStream",
			MethodName:    "startTls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_startTls_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c ByteStream) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ByteStream) String() string {
	return "ByteStream(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ByteStream) AddRef() ByteStream {
	return ByteStream(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ByteStream) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ByteStream) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ByteStream) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ByteStream) DecodeFromPtr(p capnp.Ptr) ByteStream {
	return ByteStream(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ByteStream) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ByteStream) IsSame(other ByteStream) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ByteStream) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ByteStream) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ByteStream_Server is a ByteStream with a local implementation.
type ByteStream_Server interface {
	Write(context.Context, ByteStream_write) error

	End(context.Context, ByteStream_end) error

	GetSubstream(context.Context, ByteStream_getSubstream) error

	StartTls(context.Context, ByteStream_startTls) error
}

// ByteStream_NewServer creates a new Server from an implementation of ByteStream_Server.
func ByteStream_NewServer(s ByteStream_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ByteStream_Methods(nil, s), s, c)
}

// ByteStream_ServerToClient creates a new Client from an implementation of ByteStream_Server.
// The caller is responsible for calling Release on the returned Client.
func ByteStream_ServerToClient(s ByteStream_Server) ByteStream {
	return ByteStream(capnp.NewClient(ByteStream_NewServer(s)))
}

// ByteStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ByteStream_Methods(methods []server.Method, s ByteStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2e7d8a0dc0a9766,
			MethodID:      0,
			InterfaceName: "bs/byte-stream.capnp:ByteStream",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, ByteStream_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2e7d8a0dc0a9766,
			MethodID:      1,
			InterfaceName: "bs/byte-stream.capnp:ByteStream",
			MethodName:    "end",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.End(ctx, ByteStream_end{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2e7d8a0dc0a9766,
			MethodID:      2,
			InterfaceName: "bs/byte-stream.capnp:ByteStream",
			MethodName:    "getSubstream",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSubstream(ctx, ByteStream_getSubstream{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd2e7d8a0dc0a9766,
			MethodID:      3,
			InterfaceName: "bs/byte-stream.capnp:ByteStream",
			MethodName:    "startTls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StartTls(ctx, ByteStream_startTls{call})
		},
	})

	return methods
}

// ByteStream_write holds the state for a server call to ByteStream.write.
// See server.Call for documentation.
type ByteStream_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_write) Args() ByteStream_write_Params {
	return ByteStream_write_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStream_write) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// ByteStream_end holds the state for a server call to ByteStream.end.
// See server.Call for documentation.
type ByteStream_end struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_end) Args() ByteStream_end_Params {
	return ByteStream_end_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStream_end) AllocResults() (ByteStream_end_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_end_Results(r), err
}

// ByteStream_getSubstream holds the state for a server call to ByteStream.getSubstream.
// See server.Call for documentation.
type ByteStream_getSubstream struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_getSubstream) Args() ByteStream_getSubstream_Params {
	return ByteStream_getSubstream_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStream_getSubstream) AllocResults() (ByteStream_getSubstream_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_getSubstream_Results(r), err
}

// ByteStream_startTls holds the state for a server call to ByteStream.startTls.
// See server.Call for documentation.
type ByteStream_startTls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_startTls) Args() ByteStream_startTls_Params {
	return ByteStream_startTls_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStream_startTls) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// ByteStream_List is a list of ByteStream.
type ByteStream_List = capnp.CapList[ByteStream]

// NewByteStream creates a new list of ByteStream.
func NewByteStream_List(s *capnp.Segment, sz int32) (ByteStream_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ByteStream](l), err
}

type ByteStream_SubstreamCallback capnp.Client

// ByteStream_SubstreamCallback_TypeID is the unique identifier for the type ByteStream_SubstreamCallback.
const ByteStream_SubstreamCallback_TypeID = 0xb23c0a13cf65c36e

func (c ByteStream_SubstreamCallback) Ended(ctx context.Context, params func(ByteStream_SubstreamCallback_ended_Params) error) (ByteStream_SubstreamCallback_ended_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb23c0a13cf65c36e,
			MethodID:      0,
			InterfaceName: "bs/byte-stream.capnp:ByteStream.SubstreamCallback",
			MethodName:    "ended",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_SubstreamCallback_ended_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ByteStream_SubstreamCallback_ended_Results_Future{Future: ans.Future()}, release

}

func (c ByteStream_SubstreamCallback) ReachedLimit(ctx context.Context, params func(ByteStream_SubstreamCallback_reachedLimit_Params) error) (ByteStream_SubstreamCallback_reachedLimit_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb23c0a13cf65c36e,
			MethodID:      1,
			InterfaceName: "bs/byte-stream.capnp:ByteStream.SubstreamCallback",
			MethodName:    "reachedLimit",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_SubstreamCallback_reachedLimit_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ByteStream_SubstreamCallback_reachedLimit_Results_Future{Future: ans.Future()}, release

}

func (c ByteStream_SubstreamCallback) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ByteStream_SubstreamCallback) String() string {
	return "ByteStream_SubstreamCallback(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ByteStream_SubstreamCallback) AddRef() ByteStream_SubstreamCallback {
	return ByteStream_SubstreamCallback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ByteStream_SubstreamCallback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ByteStream_SubstreamCallback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ByteStream_SubstreamCallback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ByteStream_SubstreamCallback) DecodeFromPtr(p capnp.Ptr) ByteStream_SubstreamCallback {
	return ByteStream_SubstreamCallback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ByteStream_SubstreamCallback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ByteStream_SubstreamCallback) IsSame(other ByteStream_SubstreamCallback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ByteStream_SubstreamCallback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ByteStream_SubstreamCallback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ByteStream_SubstreamCallback_Server is a ByteStream_SubstreamCallback with a local implementation.
type ByteStream_SubstreamCallback_Server interface {
	Ended(context.Context, ByteStream_SubstreamCallback_ended) error

	ReachedLimit(context.Context, ByteStream_SubstreamCallback_reachedLimit) error
}

// ByteStream_SubstreamCallback_NewServer creates a new Server from an implementation of ByteStream_SubstreamCallback_Server.
func ByteStream_SubstreamCallback_NewServer(s ByteStream_SubstreamCallback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ByteStream_SubstreamCallback_Methods(nil, s), s, c)
}

// ByteStream_SubstreamCallback_ServerToClient creates a new Client from an implementation of ByteStream_SubstreamCallback_Server.
// The caller is responsible for calling Release on the returned Client.
func ByteStream_SubstreamCallback_ServerToClient(s ByteStream_SubstreamCallback_Server) ByteStream_SubstreamCallback {
	return ByteStream_SubstreamCallback(capnp.NewClient(ByteStream_SubstreamCallback_NewServer(s)))
}

// ByteStream_SubstreamCallback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ByteStream_SubstreamCallback_Methods(methods []server.Method, s ByteStream_SubstreamCallback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb23c0a13cf65c36e,
			MethodID:      0,
			InterfaceName: "bs/byte-stream.capnp:ByteStream.SubstreamCallback",
			MethodName:    "ended",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ended(ctx, ByteStream_SubstreamCallback_ended{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb23c0a13cf65c36e,
			MethodID:      1,
			InterfaceName: "bs/byte-stream.capnp:ByteStream.SubstreamCallback",
			MethodName:    "reachedLimit",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReachedLimit(ctx, ByteStream_SubstreamCallback_reachedLimit{call})
		},
	})

	return methods
}

// ByteStream_SubstreamCallback_ended holds the state for a server call to ByteStream_SubstreamCallback.ended.
// See server.Call for documentation.
type ByteStream_SubstreamCallback_ended struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_SubstreamCallback_ended) Args() ByteStream_SubstreamCallback_ended_Params {
	return ByteStream_SubstreamCallback_ended_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStream_SubstreamCallback_ended) AllocResults() (ByteStream_SubstreamCallback_ended_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_SubstreamCallback_ended_Results(r), err
}

// ByteStream_SubstreamCallback_reachedLimit holds the state for a server call to ByteStream_SubstreamCallback.reachedLimit.
// See server.Call for documentation.
type ByteStream_SubstreamCallback_reachedLimit struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_SubstreamCallback_reachedLimit) Args() ByteStream_SubstreamCallback_reachedLimit_Params {
	return ByteStream_SubstreamCallback_reachedLimit_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStream_SubstreamCallback_reachedLimit) AllocResults() (ByteStream_SubstreamCallback_reachedLimit_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_SubstreamCallback_reachedLimit_Results(r), err
}

// ByteStream_SubstreamCallback_List is a list of ByteStream_SubstreamCallback.
type ByteStream_SubstreamCallback_List = capnp.CapList[ByteStream_SubstreamCallback]

// NewByteStream_SubstreamCallback creates a new list of ByteStream_SubstreamCallback.
func NewByteStream_SubstreamCallback_List(s *capnp.Segment, sz int32) (ByteStream_SubstreamCallback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ByteStream_SubstreamCallback](l), err
}

type ByteStream_SubstreamCallback_ended_Params capnp.Struct

// ByteStream_SubstreamCallback_ended_Params_TypeID is the unique identifier for the type ByteStream_SubstreamCallback_ended_Params.
const ByteStream_SubstreamCallback_ended_Params_TypeID = 0xccb18eca8acafbe7

func NewByteStream_SubstreamCallback_ended_Params(s *capnp.Segment) (ByteStream_SubstreamCallback_ended_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ByteStream_SubstreamCallback_ended_Params(st), err
}

func NewRootByteStream_SubstreamCallback_ended_Params(s *capnp.Segment) (ByteStream_SubstreamCallback_ended_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ByteStream_SubstreamCallback_ended_Params(st), err
}

func ReadRootByteStream_SubstreamCallback_ended_Params(msg *capnp.Message) (ByteStream_SubstreamCallback_ended_Params, error) {
	root, err := msg.Root()
	return ByteStream_SubstreamCallback_ended_Params(root.Struct()), err
}

func (s ByteStream_SubstreamCallback_ended_Params) String() string {
	str, _ := text.Marshal(0xccb18eca8acafbe7, capnp.Struct(s))
	return str
}

func (s ByteStream_SubstreamCallback_ended_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_SubstreamCallback_ended_Params) DecodeFromPtr(p capnp.Ptr) ByteStream_SubstreamCallback_ended_Params {
	return ByteStream_SubstreamCallback_ended_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_SubstreamCallback_ended_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_SubstreamCallback_ended_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_SubstreamCallback_ended_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_SubstreamCallback_ended_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ByteStream_SubstreamCallback_ended_Params) ByteCount() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s ByteStream_SubstreamCallback_ended_Params) SetByteCount(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// ByteStream_SubstreamCallback_ended_Params_List is a list of ByteStream_SubstreamCallback_ended_Params.
type ByteStream_SubstreamCallback_ended_Params_List = capnp.StructList[ByteStream_SubstreamCallback_ended_Params]

// NewByteStream_SubstreamCallback_ended_Params creates a new list of ByteStream_SubstreamCallback_ended_Params.
func NewByteStream_SubstreamCallback_ended_Params_List(s *capnp.Segment, sz int32) (ByteStream_SubstreamCallback_ended_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ByteStream_SubstreamCallback_ended_Params](l), err
}

// ByteStream_SubstreamCallback_ended_Params_Future is a wrapper for a ByteStream_SubstreamCallback_ended_Params promised by a client call.
type ByteStream_SubstreamCallback_ended_Params_Future struct{ *capnp.Future }

func (f ByteStream_SubstreamCallback_ended_Params_Future) Struct() (ByteStream_SubstreamCallback_ended_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStream_SubstreamCallback_ended_Params(p.Struct()), err
}

type ByteStream_SubstreamCallback_ended_Results capnp.Struct

// ByteStream_SubstreamCallback_ended_Results_TypeID is the unique identifier for the type ByteStream_SubstreamCallback_ended_Results.
const ByteStream_SubstreamCallback_ended_Results_TypeID = 0xba8feb56b5b6922d

func NewByteStream_SubstreamCallback_ended_Results(s *capnp.Segment) (ByteStream_SubstreamCallback_ended_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_SubstreamCallback_ended_Results(st), err
}

func NewRootByteStream_SubstreamCallback_ended_Results(s *capnp.Segment) (ByteStream_SubstreamCallback_ended_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_SubstreamCallback_ended_Results(st), err
}

func ReadRootByteStream_SubstreamCallback_ended_Results(msg *capnp.Message) (ByteStream_SubstreamCallback_ended_Results, error) {
	root, err := msg.Root()
	return ByteStream_SubstreamCallback_ended_Results(root.Struct()), err
}

func (s ByteStream_SubstreamCallback_ended_Results) String() string {
	str, _ := text.Marshal(0xba8feb56b5b6922d, capnp.Struct(s))
	return str
}

func (s ByteStream_SubstreamCallback_ended_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_SubstreamCallback_ended_Results) DecodeFromPtr(p capnp.Ptr) ByteStream_SubstreamCallback_ended_Results {
	return ByteStream_SubstreamCallback_ended_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_SubstreamCallback_ended_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_SubstreamCallback_ended_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_SubstreamCallback_ended_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_SubstreamCallback_ended_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ByteStream_SubstreamCallback_ended_Results_List is a list of ByteStream_SubstreamCallback_ended_Results.
type ByteStream_SubstreamCallback_ended_Results_List = capnp.StructList[ByteStream_SubstreamCallback_ended_Results]

// NewByteStream_SubstreamCallback_ended_Results creates a new list of ByteStream_SubstreamCallback_ended_Results.
func NewByteStream_SubstreamCallback_ended_Results_List(s *capnp.Segment, sz int32) (ByteStream_SubstreamCallback_ended_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ByteStream_SubstreamCallback_ended_Results](l), err
}

// ByteStream_SubstreamCallback_ended_Results_Future is a wrapper for a ByteStream_SubstreamCallback_ended_Results promised by a client call.
type ByteStream_SubstreamCallback_ended_Results_Future struct{ *capnp.Future }

func (f ByteStream_SubstreamCallback_ended_Results_Future) Struct() (ByteStream_SubstreamCallback_ended_Results, error) {
	p, err := f.Future.Ptr()
	return ByteStream_SubstreamCallback_ended_Results(p.Struct()), err
}

type ByteStream_SubstreamCallback_reachedLimit_Params capnp.Struct

// ByteStream_SubstreamCallback_reachedLimit_Params_TypeID is the unique identifier for the type ByteStream_SubstreamCallback_reachedLimit_Params.
const ByteStream_SubstreamCallback_reachedLimit_Params_TypeID = 0xd80bf35671585f44

func NewByteStream_SubstreamCallback_reachedLimit_Params(s *capnp.Segment) (ByteStream_SubstreamCallback_reachedLimit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_SubstreamCallback_reachedLimit_Params(st), err
}

func NewRootByteStream_SubstreamCallback_reachedLimit_Params(s *capnp.Segment) (ByteStream_SubstreamCallback_reachedLimit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_SubstreamCallback_reachedLimit_Params(st), err
}

func ReadRootByteStream_SubstreamCallback_reachedLimit_Params(msg *capnp.Message) (ByteStream_SubstreamCallback_reachedLimit_Params, error) {
	root, err := msg.Root()
	return ByteStream_SubstreamCallback_reachedLimit_Params(root.Struct()), err
}

func (s ByteStream_SubstreamCallback_reachedLimit_Params) String() string {
	str, _ := text.Marshal(0xd80bf35671585f44, capnp.Struct(s))
	return str
}

func (s ByteStream_SubstreamCallback_reachedLimit_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_SubstreamCallback_reachedLimit_Params) DecodeFromPtr(p capnp.Ptr) ByteStream_SubstreamCallback_reachedLimit_Params {
	return ByteStream_SubstreamCallback_reachedLimit_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_SubstreamCallback_reachedLimit_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_SubstreamCallback_reachedLimit_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_SubstreamCallback_reachedLimit_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_SubstreamCallback_reachedLimit_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ByteStream_SubstreamCallback_reachedLimit_Params_List is a list of ByteStream_SubstreamCallback_reachedLimit_Params.
type ByteStream_SubstreamCallback_reachedLimit_Params_List = capnp.StructList[ByteStream_SubstreamCallback_reachedLimit_Params]

// NewByteStream_SubstreamCallback_reachedLimit_Params creates a new list of ByteStream_SubstreamCallback_reachedLimit_Params.
func NewByteStream_SubstreamCallback_reachedLimit_Params_List(s *capnp.Segment, sz int32) (ByteStream_SubstreamCallback_reachedLimit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ByteStream_SubstreamCallback_reachedLimit_Params](l), err
}

// ByteStream_SubstreamCallback_reachedLimit_Params_Future is a wrapper for a ByteStream_SubstreamCallback_reachedLimit_Params promised by a client call.
type ByteStream_SubstreamCallback_reachedLimit_Params_Future struct{ *capnp.Future }

func (f ByteStream_SubstreamCallback_reachedLimit_Params_Future) Struct() (ByteStream_SubstreamCallback_reachedLimit_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStream_SubstreamCallback_reachedLimit_Params(p.Struct()), err
}

type ByteStream_SubstreamCallback_reachedLimit_Results capnp.Struct

// ByteStream_SubstreamCallback_reachedLimit_Results_TypeID is the unique identifier for the type ByteStream_SubstreamCallback_reachedLimit_Results.
const ByteStream_SubstreamCallback_reachedLimit_Results_TypeID = 0xddd06638ed144353

func NewByteStream_SubstreamCallback_reachedLimit_Results(s *capnp.Segment) (ByteStream_SubstreamCallback_reachedLimit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_SubstreamCallback_reachedLimit_Results(st), err
}

func NewRootByteStream_SubstreamCallback_reachedLimit_Results(s *capnp.Segment) (ByteStream_SubstreamCallback_reachedLimit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_SubstreamCallback_reachedLimit_Results(st), err
}

func ReadRootByteStream_SubstreamCallback_reachedLimit_Results(msg *capnp.Message) (ByteStream_SubstreamCallback_reachedLimit_Results, error) {
	root, err := msg.Root()
	return ByteStream_SubstreamCallback_reachedLimit_Results(root.Struct()), err
}

func (s ByteStream_SubstreamCallback_reachedLimit_Results) String() string {
	str, _ := text.Marshal(0xddd06638ed144353, capnp.Struct(s))
	return str
}

func (s ByteStream_SubstreamCallback_reachedLimit_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_SubstreamCallback_reachedLimit_Results) DecodeFromPtr(p capnp.Ptr) ByteStream_SubstreamCallback_reachedLimit_Results {
	return ByteStream_SubstreamCallback_reachedLimit_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_SubstreamCallback_reachedLimit_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_SubstreamCallback_reachedLimit_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_SubstreamCallback_reachedLimit_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_SubstreamCallback_reachedLimit_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ByteStream_SubstreamCallback_reachedLimit_Results) Next() ByteStream {
	p, _ := capnp.Struct(s).Ptr(0)
	return ByteStream(p.Interface().Client())
}

func (s ByteStream_SubstreamCallback_reachedLimit_Results) HasNext() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ByteStream_SubstreamCallback_reachedLimit_Results) SetNext(v ByteStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ByteStream_SubstreamCallback_reachedLimit_Results_List is a list of ByteStream_SubstreamCallback_reachedLimit_Results.
type ByteStream_SubstreamCallback_reachedLimit_Results_List = capnp.StructList[ByteStream_SubstreamCallback_reachedLimit_Results]

// NewByteStream_SubstreamCallback_reachedLimit_Results creates a new list of ByteStream_SubstreamCallback_reachedLimit_Results.
func NewByteStream_SubstreamCallback_reachedLimit_Results_List(s *capnp.Segment, sz int32) (ByteStream_SubstreamCallback_reachedLimit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ByteStream_SubstreamCallback_reachedLimit_Results](l), err
}

// ByteStream_SubstreamCallback_reachedLimit_Results_Future is a wrapper for a ByteStream_SubstreamCallback_reachedLimit_Results promised by a client call.
type ByteStream_SubstreamCallback_reachedLimit_Results_Future struct{ *capnp.Future }

func (f ByteStream_SubstreamCallback_reachedLimit_Results_Future) Struct() (ByteStream_SubstreamCallback_reachedLimit_Results, error) {
	p, err := f.Future.Ptr()
	return ByteStream_SubstreamCallback_reachedLimit_Results(p.Struct()), err
}
func (p ByteStream_SubstreamCallback_reachedLimit_Results_Future) Next() ByteStream {
	return ByteStream(p.Future.Field(0, nil).Client())
}

type ByteStream_write_Params capnp.Struct

// ByteStream_write_Params_TypeID is the unique identifier for the type ByteStream_write_Params.
const ByteStream_write_Params_TypeID = 0xa45d8c4c07bb36d2

func NewByteStream_write_Params(s *capnp.Segment) (ByteStream_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_write_Params(st), err
}

func NewRootByteStream_write_Params(s *capnp.Segment) (ByteStream_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_write_Params(st), err
}

func ReadRootByteStream_write_Params(msg *capnp.Message) (ByteStream_write_Params, error) {
	root, err := msg.Root()
	return ByteStream_write_Params(root.Struct()), err
}

func (s ByteStream_write_Params) String() string {
	str, _ := text.Marshal(0xa45d8c4c07bb36d2, capnp.Struct(s))
	return str
}

func (s ByteStream_write_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_write_Params) DecodeFromPtr(p capnp.Ptr) ByteStream_write_Params {
	return ByteStream_write_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_write_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_write_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_write_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_write_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ByteStream_write_Params) Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ByteStream_write_Params) HasBytes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ByteStream_write_Params) SetBytes(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// ByteStream_write_Params_List is a list of ByteStream_write_Params.
type ByteStream_write_Params_List = capnp.StructList[ByteStream_write_Params]

// NewByteStream_write_Params creates a new list of ByteStream_write_Params.
func NewByteStream_write_Params_List(s *capnp.Segment, sz int32) (ByteStream_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ByteStream_write_Params](l), err
}

// ByteStream_write_Params_Future is a wrapper for a ByteStream_write_Params promised by a client call.
type ByteStream_write_Params_Future struct{ *capnp.Future }

func (f ByteStream_write_Params_Future) Struct() (ByteStream_write_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStream_write_Params(p.Struct()), err
}

type ByteStream_end_Params capnp.Struct

// ByteStream_end_Params_TypeID is the unique identifier for the type ByteStream_end_Params.
const ByteStream_end_Params_TypeID = 0xcbd32047945c0144

func NewByteStream_end_Params(s *capnp.Segment) (ByteStream_end_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_end_Params(st), err
}

func NewRootByteStream_end_Params(s *capnp.Segment) (ByteStream_end_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_end_Params(st), err
}

func ReadRootByteStream_end_Params(msg *capnp.Message) (ByteStream_end_Params, error) {
	root, err := msg.Root()
	return ByteStream_end_Params(root.Struct()), err
}

func (s ByteStream_end_Params) String() string {
	str, _ := text.Marshal(0xcbd32047945c0144, capnp.Struct(s))
	return str
}

func (s ByteStream_end_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_end_Params) DecodeFromPtr(p capnp.Ptr) ByteStream_end_Params {
	return ByteStream_end_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_end_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_end_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_end_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_end_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ByteStream_end_Params_List is a list of ByteStream_end_Params.
type ByteStream_end_Params_List = capnp.StructList[ByteStream_end_Params]

// NewByteStream_end_Params creates a new list of ByteStream_end_Params.
func NewByteStream_end_Params_List(s *capnp.Segment, sz int32) (ByteStream_end_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ByteStream_end_Params](l), err
}

// ByteStream_end_Params_Future is a wrapper for a ByteStream_end_Params promised by a client call.
type ByteStream_end_Params_Future struct{ *capnp.Future }

func (f ByteStream_end_Params_Future) Struct() (ByteStream_end_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStream_end_Params(p.Struct()), err
}

type ByteStream_end_Results capnp.Struct

// ByteStream_end_Results_TypeID is the unique identifier for the type ByteStream_end_Results.
const ByteStream_end_Results_TypeID = 0xe7e2ddbc3c63d594

func NewByteStream_end_Results(s *capnp.Segment) (ByteStream_end_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_end_Results(st), err
}

func NewRootByteStream_end_Results(s *capnp.Segment) (ByteStream_end_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_end_Results(st), err
}

func ReadRootByteStream_end_Results(msg *capnp.Message) (ByteStream_end_Results, error) {
	root, err := msg.Root()
	return ByteStream_end_Results(root.Struct()), err
}

func (s ByteStream_end_Results) String() string {
	str, _ := text.Marshal(0xe7e2ddbc3c63d594, capnp.Struct(s))
	return str
}

func (s ByteStream_end_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_end_Results) DecodeFromPtr(p capnp.Ptr) ByteStream_end_Results {
	return ByteStream_end_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_end_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_end_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_end_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_end_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ByteStream_end_Results_List is a list of ByteStream_end_Results.
type ByteStream_end_Results_List = capnp.StructList[ByteStream_end_Results]

// NewByteStream_end_Results creates a new list of ByteStream_end_Results.
func NewByteStream_end_Results_List(s *capnp.Segment, sz int32) (ByteStream_end_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ByteStream_end_Results](l), err
}

// ByteStream_end_Results_Future is a wrapper for a ByteStream_end_Results promised by a client call.
type ByteStream_end_Results_Future struct{ *capnp.Future }

func (f ByteStream_end_Results_Future) Struct() (ByteStream_end_Results, error) {
	p, err := f.Future.Ptr()
	return ByteStream_end_Results(p.Struct()), err
}

type ByteStream_getSubstream_Params capnp.Struct

// ByteStream_getSubstream_Params_TypeID is the unique identifier for the type ByteStream_getSubstream_Params.
const ByteStream_getSubstream_Params_TypeID = 0xc5b18e80fc80d9f8

func NewByteStream_getSubstream_Params(s *capnp.Segment) (ByteStream_getSubstream_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ByteStream_getSubstream_Params(st), err
}

func NewRootByteStream_getSubstream_Params(s *capnp.Segment) (ByteStream_getSubstream_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ByteStream_getSubstream_Params(st), err
}

func ReadRootByteStream_getSubstream_Params(msg *capnp.Message) (ByteStream_getSubstream_Params, error) {
	root, err := msg.Root()
	return ByteStream_getSubstream_Params(root.Struct()), err
}

func (s ByteStream_getSubstream_Params) String() string {
	str, _ := text.Marshal(0xc5b18e80fc80d9f8, capnp.Struct(s))
	return str
}

func (s ByteStream_getSubstream_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_getSubstream_Params) DecodeFromPtr(p capnp.Ptr) ByteStream_getSubstream_Params {
	return ByteStream_getSubstream_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_getSubstream_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_getSubstream_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_getSubstream_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_getSubstream_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ByteStream_getSubstream_Params) Callback() ByteStream_SubstreamCallback {
	p, _ := capnp.Struct(s).Ptr(0)
	return ByteStream_SubstreamCallback(p.Interface().Client())
}

func (s ByteStream_getSubstream_Params) HasCallback() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ByteStream_getSubstream_Params) SetCallback(v ByteStream_SubstreamCallback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s ByteStream_getSubstream_Params) Limit() uint64 {
	return capnp.Struct(s).Uint64(0) ^ 18446744073709551615
}

func (s ByteStream_getSubstream_Params) SetLimit(v uint64) {
	capnp.Struct(s).SetUint64(0, v^18446744073709551615)
}

// ByteStream_getSubstream_Params_List is a list of ByteStream_getSubstream_Params.
type ByteStream_getSubstream_Params_List = capnp.StructList[ByteStream_getSubstream_Params]

// NewByteStream_getSubstream_Params creates a new list of ByteStream_getSubstream_Params.
func NewByteStream_getSubstream_Params_List(s *capnp.Segment, sz int32) (ByteStream_getSubstream_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ByteStream_getSubstream_Params](l), err
}

// ByteStream_getSubstream_Params_Future is a wrapper for a ByteStream_getSubstream_Params promised by a client call.
type ByteStream_getSubstream_Params_Future struct{ *capnp.Future }

func (f ByteStream_getSubstream_Params_Future) Struct() (ByteStream_getSubstream_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStream_getSubstream_Params(p.Struct()), err
}
func (p ByteStream_getSubstream_Params_Future) Callback() ByteStream_SubstreamCallback {
	return ByteStream_SubstreamCallback(p.Future.Field(0, nil).Client())
}

type ByteStream_getSubstream_Results capnp.Struct

// ByteStream_getSubstream_Results_TypeID is the unique identifier for the type ByteStream_getSubstream_Results.
const ByteStream_getSubstream_Results_TypeID = 0x8d198ede6d27756a

func NewByteStream_getSubstream_Results(s *capnp.Segment) (ByteStream_getSubstream_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_getSubstream_Results(st), err
}

func NewRootByteStream_getSubstream_Results(s *capnp.Segment) (ByteStream_getSubstream_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_getSubstream_Results(st), err
}

func ReadRootByteStream_getSubstream_Results(msg *capnp.Message) (ByteStream_getSubstream_Results, error) {
	root, err := msg.Root()
	return ByteStream_getSubstream_Results(root.Struct()), err
}

func (s ByteStream_getSubstream_Results) String() string {
	str, _ := text.Marshal(0x8d198ede6d27756a, capnp.Struct(s))
	return str
}

func (s ByteStream_getSubstream_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_getSubstream_Results) DecodeFromPtr(p capnp.Ptr) ByteStream_getSubstream_Results {
	return ByteStream_getSubstream_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_getSubstream_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_getSubstream_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_getSubstream_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_getSubstream_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ByteStream_getSubstream_Results) Substream() ByteStream {
	p, _ := capnp.Struct(s).Ptr(0)
	return ByteStream(p.Interface().Client())
}

func (s ByteStream_getSubstream_Results) HasSubstream() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ByteStream_getSubstream_Results) SetSubstream(v ByteStream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ByteStream_getSubstream_Results_List is a list of ByteStream_getSubstream_Results.
type ByteStream_getSubstream_Results_List = capnp.StructList[ByteStream_getSubstream_Results]

// NewByteStream_getSubstream_Results creates a new list of ByteStream_getSubstream_Results.
func NewByteStream_getSubstream_Results_List(s *capnp.Segment, sz int32) (ByteStream_getSubstream_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ByteStream_getSubstream_Results](l), err
}

// ByteStream_getSubstream_Results_Future is a wrapper for a ByteStream_getSubstream_Results promised by a client call.
type ByteStream_getSubstream_Results_Future struct{ *capnp.Future }

func (f ByteStream_getSubstream_Results_Future) Struct() (ByteStream_getSubstream_Results, error) {
	p, err := f.Future.Ptr()
	return ByteStream_getSubstream_Results(p.Struct()), err
}
func (p ByteStream_getSubstream_Results_Future) Substream() ByteStream {
	return ByteStream(p.Future.Field(0, nil).Client())
}

type ByteStream_startTls_Params capnp.Struct

// ByteStream_startTls_Params_TypeID is the unique identifier for the type ByteStream_startTls_Params.
const ByteStream_startTls_Params_TypeID = 0xea8253a695da1ab8

func NewByteStream_startTls_Params(s *capnp.Segment) (ByteStream_startTls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_startTls_Params(st), err
}

func NewRootByteStream_startTls_Params(s *capnp.Segment) (ByteStream_startTls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_startTls_Params(st), err
}

func ReadRootByteStream_startTls_Params(msg *capnp.Message) (ByteStream_startTls_Params, error) {
	root, err := msg.Root()
	return ByteStream_startTls_Params(root.Struct()), err
}

func (s ByteStream_startTls_Params) String() string {
	str, _ := text.Marshal(0xea8253a695da1ab8, capnp.Struct(s))
	return str
}

func (s ByteStream_startTls_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_startTls_Params) DecodeFromPtr(p capnp.Ptr) ByteStream_startTls_Params {
	return ByteStream_startTls_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_startTls_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_startTls_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_startTls_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_startTls_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ByteStream_startTls_Params) ExpectedServerHostname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ByteStream_startTls_Params) HasExpectedServerHostname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ByteStream_startTls_Params) ExpectedServerHostnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ByteStream_startTls_Params) SetExpectedServerHostname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ByteStream_startTls_Params_List is a list of ByteStream_startTls_Params.
type ByteStream_startTls_Params_List = capnp.StructList[ByteStream_startTls_Params]

// NewByteStream_startTls_Params creates a new list of ByteStream_startTls_Params.
func NewByteStream_startTls_Params_List(s *capnp.Segment, sz int32) (ByteStream_startTls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ByteStream_startTls_Params](l), err
}

// ByteStream_startTls_Params_Future is a wrapper for a ByteStream_startTls_Params promised by a client call.
type ByteStream_startTls_Params_Future struct{ *capnp.Future }

func (f ByteStream_startTls_Params_Future) Struct() (ByteStream_startTls_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStream_startTls_Params(p.Struct()), err
}

const schema_8f5d14e1c273738d = "x\xda\xa4\x94_h\x1cU\x18\xc5\xcf\x99;\x93Ij" +
	"\x96\xede#Z\x116J\xc4?\x98jwUj\xa9" +
	"\xecj\x0aJiaoV\x8b\x11K\x99\xdd\xbd\xd5\xa4" +
	";\xd3tgb\xda\xb7\xd2\x17AL\x8a\xa1\"\x15\x04" +
	"\x11\xf1A\xf0!\x82\xa2\xd5\x07Q|\xa9\x8aZ\x11\xaa" +
	"XA_\x02\x8aO}\x11\xff0rw3\xb3\x93\x87" +
	"%Q\xe7q\xee\x9d\xef\xfb\xcd9\xe7\xfb\xee\xbe\xca\xaa" +
	"\xbd+\xb76\x04K\xd5\x9c\xa1xn\xe1V\xff\xc7\xe5" +
	"\x1dK\x90\xe3\x04\x1c\xba@yF\xbcI\xb00+*" +
	"`|\xe9\xbe\x0f\xdc\x03\xcf\x1f~={aI\xcc\x99" +
	"\x0b\xe7\xbb\x17\x82O\xf4\x97\x85m{\xdf\x86\x1c\x17\xf1" +
	"\xd1\x97\xb6\xfd\xf0\xea\xe5\xb5K\x00\xcb\xef\x8b\x15\x16\xbe" +
	"\x16.P\xf8B<[\xb8\xc9v\x81xr\xe5\xddw" +
	"\x0e\xfdz\xf6\x02d\x89\x80yU\x1e\xb1-\x0bv\xfc" +
	"\xfbw\xa7\xff:\xbd\xbc\xfa)\xd48\xd3N\x7f\x8b\xd7" +
	"L\xa7\x9c\xbd\x08\xc6\xfb\xf8\xe4\xb9\x87\xc7\xbf\xf9\xac\x87" +
	"\xd2\xfd\xd6\xb7\x9f \xecx\xed\xcf\x8b\xcf]\\^\xfd" +
	"\x1c\xaa\xc4\xe4h\xc6\xfe\xc3|\xea\xdb\x062\xe5\x92\xd7" +
	"\x8ax)\x0c?\xfei\xec\xf0Y\x03\xf9\x82m\xb1\xf0" +
	"\x8a}\x1dP~\xcbvYx\xcc1\x94\xfb\x8e<~" +
	"\xe2\xd0\xd5k.g(\x1fpJ\x86\xb2>5\xf6\xdb" +
	"\xee\xa3_]\xe9\x9d\xf4 \xefu\xf6X`\xe1\xa0c" +
	":\x9d\xfb\xb6\xb9\xf7\xc3+?\xafe!\x9d\x86\x81|" +
	"\xef\x86\xef_|\xa3~\xe6\x97\x0dR;g\x0c\xa4v" +
	"*\x98\x89\x1b\xe1]\x8dS\x91\x9et\xc2\xa8\xa3=\x7f" +
	"g\xd3\x9b\x0f\xe6\xf7<t*\xd2\xf5\xde\x8b\xa7tT" +
	"_h\xf4N'\xa6u\x98_hG\xa1\xb2\x85\x0d\xd8" +
	"\x04dn\x1aP\xa3\x82\xeaz\x8bq\xb8~\x13\xf4)" +
	"\xb3\xc6P\x82i/{P\xaf\xc5\xcel\xa4'j^" +
	"\xbe\xe3\xf9\x1bz\x94\x005,\xa8\xc6,\x16M\x89\x90" +
	"9X\xccej\x0e\xe4O\xe1\xa7\xbcv\xbb\xe15y" +
	"\xacF\xaaa\xe1\x00\xa9\x85L\x12\"w\x95`\xc9[" +
	"\\2\xb5\x83\x89\xfar\xc7\x1c,)\xdd\xa2\x0eZ\xba" +
	"Ue\xdc\xd1^\xf3i\xdd:\x80\xfc\xac?\x1bUY" +
	"c\x1f'\xb7U\x9cc;\xbb\xe5\x8c\xb2FX$\x05" +
	"\xb6dG\xcd\xeb\xb8F\xa9\xe1T\xa9\xdb\xf7\x03\xea6" +
	"Au\x8fEr\x8c$\xcd?A\xdd)\xa8v[\x8c" +
	"\x9b\xebm\x01P\xf6\xe7\xa8\xe7P\xb1m\xfe\x84#\xb0" +
	"8\x12'\x0f\x80\xcd\x9d\xd3A\xcb\xd0x\xc2\x0f\xd3\xcb" +
	"C\xffV\x83\x8a\xa9\xe0\x0f\x0c\x97):u|!\x00" +
	"\xd7\x113\xf6\x8b\x01\xbd\xa0lf\xd7\x05W\xe2\xa4;" +
	"\xfb\x89P\xdb\xbbqH\xd6\x0e\x83\xd5\x8f\x16\xcb/\x1f" +
	"9/O\x988\xe8n\x1c\xd6\xf7\x00\x93Y\x9337" +
	"\xc3\x92\x07]Z\xe9\x16a\xb2\xd8\xe4\x83&*\xf7\xbb" +
	"\x14\xe9\x00\xf6kN\xee\xefF\xac\xd8\x0d{\x95\xae\x0e" +
	"L\x98\x12_\x917\xd8U\xc6a\xe4u\xa2G\xdb!" +
	"\x80\x8d\xd1r\xb7.k\x92P\xe3\xeaD\xad\xd8U\xf7" +
	"\x7f\xd7\x99\xae\xf4\xa2\x9a\xb5\xe9\x8e\xfe|\xe6\x03}2" +
	"\xfa/\xc3o\"d\xa6\xc0mG\xe1\xe6c\x9d\xc83" +
	"\xd1\xcb\x0c\xb24\x17\x00\xb5]P\xddh1\xd6'\xe7" +
	"u3\xd2-\xd6u\xe7\x19\xddy\xe4x%\x8c\x02\xcf" +
	"\xd7\x1c\x85\xc5Q\xf0\x9f\x00\x00\x00\xff\xffO\x8c\x0e\xfb"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_8f5d14e1c273738d,
		Nodes: []uint64{
			0x8d198ede6d27756a,
			0xa45d8c4c07bb36d2,
			0xb23c0a13cf65c36e,
			0xba8feb56b5b6922d,
			0xc5b18e80fc80d9f8,
			0xcbd32047945c0144,
			0xccb18eca8acafbe7,
			0xd2e7d8a0dc0a9766,
			0xd80bf35671585f44,
			0xddd06638ed144353,
			0xe7e2ddbc3c63d594,
			0xea8253a695da1ab8,
		},
		Compressed: true,
	})
}
